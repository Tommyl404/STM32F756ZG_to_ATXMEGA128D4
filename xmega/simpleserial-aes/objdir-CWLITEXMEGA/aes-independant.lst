   1               		.file	"aes-independant.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	aes_indep_init
  14               	aes_indep_init:
  15               	.LFB11:
  16               		.file 1 ".././crypto/aes-independant.c"
   1:.././crypto/aes-independant.c **** /*
   2:.././crypto/aes-independant.c ****     This file is part of the AESExplorer Example Targets
   3:.././crypto/aes-independant.c ****     Copyright (C) 2012 Colin O'Flynn <coflynn@newae.com>
   4:.././crypto/aes-independant.c **** 
   5:.././crypto/aes-independant.c ****     This program is free software: you can redistribute it and/or modify
   6:.././crypto/aes-independant.c ****     it under the terms of the GNU General Public License as published by
   7:.././crypto/aes-independant.c ****     the Free Software Foundation, either version 3 of the License, or
   8:.././crypto/aes-independant.c ****     (at your option) any later version.
   9:.././crypto/aes-independant.c **** 
  10:.././crypto/aes-independant.c ****     This program is distributed in the hope that it will be useful,
  11:.././crypto/aes-independant.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././crypto/aes-independant.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././crypto/aes-independant.c ****     GNU General Public License for more details.
  14:.././crypto/aes-independant.c **** 
  15:.././crypto/aes-independant.c ****     You should have received a copy of the GNU General Public License
  16:.././crypto/aes-independant.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././crypto/aes-independant.c **** */
  18:.././crypto/aes-independant.c **** 
  19:.././crypto/aes-independant.c **** #include "aes-independant.h"
  20:.././crypto/aes-independant.c **** #include "hal.h"
  21:.././crypto/aes-independant.c **** 
  22:.././crypto/aes-independant.c **** #if HWCRYPTO
  23:.././crypto/aes-independant.c **** 
  24:.././crypto/aes-independant.c **** void aes_indep_init(void)
  25:.././crypto/aes-independant.c **** {
  26:.././crypto/aes-independant.c ****     HW_AES128_Init();
  27:.././crypto/aes-independant.c **** }
  28:.././crypto/aes-independant.c **** 
  29:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  30:.././crypto/aes-independant.c **** {
  31:.././crypto/aes-independant.c ****     HW_AES128_LoadKey(key);
  32:.././crypto/aes-independant.c **** }
  33:.././crypto/aes-independant.c **** 
  34:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  35:.././crypto/aes-independant.c **** {
  36:.././crypto/aes-independant.c ****     HW_AES128_Enc_pretrigger(pt);
  37:.././crypto/aes-independant.c **** }
  38:.././crypto/aes-independant.c **** 
  39:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  40:.././crypto/aes-independant.c **** {
  41:.././crypto/aes-independant.c ****     HW_AES128_Enc_posttrigger(pt);
  42:.././crypto/aes-independant.c **** }
  43:.././crypto/aes-independant.c **** 
  44:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  45:.././crypto/aes-independant.c **** {
  46:.././crypto/aes-independant.c ****     HW_AES128_Enc(pt);
  47:.././crypto/aes-independant.c **** }
  48:.././crypto/aes-independant.c **** 
  49:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  50:.././crypto/aes-independant.c **** {
  51:.././crypto/aes-independant.c **** }
  52:.././crypto/aes-independant.c **** 
  53:.././crypto/aes-independant.c **** #elif defined(AVRCRYPTOLIB)
  54:.././crypto/aes-independant.c **** #include "aes128_enc.h"
  55:.././crypto/aes-independant.c **** #include "aes_keyschedule.h"
  56:.././crypto/aes-independant.c **** 
  57:.././crypto/aes-independant.c **** aes128_ctx_t ctx;
  58:.././crypto/aes-independant.c **** 
  59:.././crypto/aes-independant.c **** void aes_indep_init(void)
  60:.././crypto/aes-independant.c **** {
  61:.././crypto/aes-independant.c **** 	;
  62:.././crypto/aes-independant.c **** }
  63:.././crypto/aes-independant.c **** 
  64:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  65:.././crypto/aes-independant.c **** {
  66:.././crypto/aes-independant.c **** 	aes128_init(key, &ctx);
  67:.././crypto/aes-independant.c **** }
  68:.././crypto/aes-independant.c **** 
  69:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  70:.././crypto/aes-independant.c **** {
  71:.././crypto/aes-independant.c **** 	aes128_enc(pt, &ctx); /* encrypting the data block */
  72:.././crypto/aes-independant.c **** }
  73:.././crypto/aes-independant.c **** 
  74:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  75:.././crypto/aes-independant.c **** {
  76:.././crypto/aes-independant.c ****     ;
  77:.././crypto/aes-independant.c **** }
  78:.././crypto/aes-independant.c **** 
  79:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  80:.././crypto/aes-independant.c **** {
  81:.././crypto/aes-independant.c ****     ;
  82:.././crypto/aes-independant.c **** }
  83:.././crypto/aes-independant.c **** 
  84:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  85:.././crypto/aes-independant.c **** {
  86:.././crypto/aes-independant.c **** }
  87:.././crypto/aes-independant.c **** 
  88:.././crypto/aes-independant.c **** #elif defined(SIMPLEAES)
  89:.././crypto/aes-independant.c **** 
  90:.././crypto/aes-independant.c **** uint8_t enckey[16];
  91:.././crypto/aes-independant.c **** 
  92:.././crypto/aes-independant.c **** void aes_indep_init(void)
  93:.././crypto/aes-independant.c **** {
  94:.././crypto/aes-independant.c **** 	;
  95:.././crypto/aes-independant.c **** }
  96:.././crypto/aes-independant.c **** 
  97:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  98:.././crypto/aes-independant.c **** {
  99:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 100:.././crypto/aes-independant.c **** 		enckey[i] = key[i];
 101:.././crypto/aes-independant.c **** 	}
 102:.././crypto/aes-independant.c **** }
 103:.././crypto/aes-independant.c **** 
 104:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 105:.././crypto/aes-independant.c **** {
 106:.././crypto/aes-independant.c **** 	uint8_t * result = aes(pt, enckey);
 107:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 108:.././crypto/aes-independant.c **** 		pt[i] = result[i];
 109:.././crypto/aes-independant.c **** 	}
 110:.././crypto/aes-independant.c **** }
 111:.././crypto/aes-independant.c **** 
 112:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 113:.././crypto/aes-independant.c **** {
 114:.././crypto/aes-independant.c ****     ;
 115:.././crypto/aes-independant.c **** }
 116:.././crypto/aes-independant.c **** 
 117:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 118:.././crypto/aes-independant.c **** {
 119:.././crypto/aes-independant.c ****     ;
 120:.././crypto/aes-independant.c **** }
 121:.././crypto/aes-independant.c **** 
 122:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 123:.././crypto/aes-independant.c **** {
 124:.././crypto/aes-independant.c **** }
 125:.././crypto/aes-independant.c **** 
 126:.././crypto/aes-independant.c **** #elif defined(DPAV4)
 127:.././crypto/aes-independant.c **** 
 128:.././crypto/aes-independant.c **** #include "aes.h"
 129:.././crypto/aes-independant.c **** #include "aes_enc.h"
 130:.././crypto/aes-independant.c **** 
 131:.././crypto/aes-independant.c **** /*  This is the AES RSM 256 encryption function that call the generic AES RSM encryption core*/
 132:.././crypto/aes-independant.c **** void aes256_enc(uint8_t* j, void* buffer, aes256_ctx_t* ctx,uint8_t rng){
 133:.././crypto/aes-independant.c **** 	aes_encrypt_core(j,buffer, (aes_genctx_t*)ctx, 14,(uint8_t)rng);
 134:.././crypto/aes-independant.c **** }
 135:.././crypto/aes-independant.c **** 
 136:.././crypto/aes-independant.c **** aes256_ctx_t ctx;
 137:.././crypto/aes-independant.c **** 
 138:.././crypto/aes-independant.c **** void aes_indep_init(void)
 139:.././crypto/aes-independant.c **** {
 140:.././crypto/aes-independant.c ****     ;
 141:.././crypto/aes-independant.c **** }
 142:.././crypto/aes-independant.c **** 
 143:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 144:.././crypto/aes-independant.c **** {
 145:.././crypto/aes-independant.c **** 	aes256_init(key, &ctx);
 146:.././crypto/aes-independant.c **** }
 147:.././crypto/aes-independant.c **** 
 148:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 149:.././crypto/aes-independant.c **** {
 150:.././crypto/aes-independant.c **** 	static uint8_t j[0];
 151:.././crypto/aes-independant.c **** 
 152:.././crypto/aes-independant.c **** 	//Encryption with trigger enabled
 153:.././crypto/aes-independant.c **** 	aes256_enc(j, pt, &ctx, 1);
 154:.././crypto/aes-independant.c **** }
 155:.././crypto/aes-independant.c **** 
 156:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 157:.././crypto/aes-independant.c **** {
 158:.././crypto/aes-independant.c ****     ;
 159:.././crypto/aes-independant.c **** }
 160:.././crypto/aes-independant.c **** 
 161:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 162:.././crypto/aes-independant.c **** {
 163:.././crypto/aes-independant.c ****     ;
 164:.././crypto/aes-independant.c **** }
 165:.././crypto/aes-independant.c **** 
 166:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 167:.././crypto/aes-independant.c **** {
 168:.././crypto/aes-independant.c **** }
 169:.././crypto/aes-independant.c **** 
 170:.././crypto/aes-independant.c **** #elif defined(TINYAES128C)
 171:.././crypto/aes-independant.c **** 
 172:.././crypto/aes-independant.c **** #include "aes.h"
 173:.././crypto/aes-independant.c **** 
 174:.././crypto/aes-independant.c **** uint8_t enckey[16];
 175:.././crypto/aes-independant.c **** 
 176:.././crypto/aes-independant.c **** void aes_indep_init(void)
 177:.././crypto/aes-independant.c **** {
  17               		.loc 1 177 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 0895      		ret
  24               		.cfi_endproc
  25               	.LFE11:
  27               	.global	aes_indep_key
  29               	aes_indep_key:
  30               	.LFB12:
 178:.././crypto/aes-independant.c **** 	;
 179:.././crypto/aes-independant.c **** }
 180:.././crypto/aes-independant.c **** 
 181:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 182:.././crypto/aes-independant.c **** {
  31               		.loc 1 182 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
 183:.././crypto/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  38               		.loc 1 183 0
  39 0002 0C94 0000 		jmp AES128_ECB_indp_setkey
  40               	.LVL1:
  41               		.cfi_endproc
  42               	.LFE12:
  44               	.global	aes_indep_enc
  46               	aes_indep_enc:
  47               	.LFB13:
 184:.././crypto/aes-independant.c **** }
 185:.././crypto/aes-independant.c **** 
 186:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 187:.././crypto/aes-independant.c **** {
  48               		.loc 1 187 0
  49               		.cfi_startproc
  50               	.LVL2:
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
 188:.././crypto/aes-independant.c **** 	AES128_ECB_indp_crypto(pt);
  55               		.loc 1 188 0
  56 0006 0C94 0000 		jmp AES128_ECB_indp_crypto
  57               	.LVL3:
  58               		.cfi_endproc
  59               	.LFE13:
  61               	.global	aes_indep_enc_pretrigger
  63               	aes_indep_enc_pretrigger:
  64               	.LFB18:
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  70 000a 0895      		ret
  71               		.cfi_endproc
  72               	.LFE18:
  74               	.global	aes_indep_enc_posttrigger
  76               	aes_indep_enc_posttrigger:
  77               	.LFB15:
 189:.././crypto/aes-independant.c **** }
 190:.././crypto/aes-independant.c **** 
 191:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 192:.././crypto/aes-independant.c **** {
 193:.././crypto/aes-independant.c ****     ;
 194:.././crypto/aes-independant.c **** }
 195:.././crypto/aes-independant.c **** 
 196:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 197:.././crypto/aes-independant.c **** {
  78               		.loc 1 197 0
  79               		.cfi_startproc
  80               	.LVL4:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  85 000c 0895      		ret
  86               		.cfi_endproc
  87               	.LFE15:
  89               	.global	aes_indep_mask
  91               	aes_indep_mask:
  92               	.LFB16:
 198:.././crypto/aes-independant.c ****     ;
 199:.././crypto/aes-independant.c **** }
 200:.././crypto/aes-independant.c **** 
 201:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 202:.././crypto/aes-independant.c **** {
  93               		.loc 1 202 0
  94               		.cfi_startproc
  95               	.LVL5:
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 100 000e 0895      		ret
 101               		.cfi_endproc
 102               	.LFE16:
 104               		.comm	enckey,16,1
 105               	.Letext0:
 106               		.file 2 ".././crypto/tiny-AES128-C/aes.h"
 107               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 aes-independant.c
     /tmp/ccLUAtBL.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLUAtBL.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLUAtBL.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLUAtBL.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccLUAtBL.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/ccLUAtBL.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLUAtBL.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLUAtBL.s:14     .text:0000000000000000 aes_indep_init
     /tmp/ccLUAtBL.s:29     .text:0000000000000002 aes_indep_key
     /tmp/ccLUAtBL.s:46     .text:0000000000000006 aes_indep_enc
     /tmp/ccLUAtBL.s:63     .text:000000000000000a aes_indep_enc_pretrigger
     /tmp/ccLUAtBL.s:76     .text:000000000000000c aes_indep_enc_posttrigger
     /tmp/ccLUAtBL.s:91     .text:000000000000000e aes_indep_mask
                            *COM*:0000000000000010 enckey

UNDEFINED SYMBOLS
AES128_ECB_indp_setkey
AES128_ECB_indp_crypto
__do_clear_bss
