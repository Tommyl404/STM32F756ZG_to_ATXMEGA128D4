   1               		.file	"simpleserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	check_version
  14               	check_version:
  15               	.LFB12:
  16               		.file 1 ".././simpleserial/simpleserial.c"
   1:.././simpleserial/simpleserial.c **** // simpleserial.c
   2:.././simpleserial/simpleserial.c **** 
   3:.././simpleserial/simpleserial.c **** #include "simpleserial.h"
   4:.././simpleserial/simpleserial.c **** #include <stdint.h>
   5:.././simpleserial/simpleserial.c **** #include "hal.h"
   6:.././simpleserial/simpleserial.c **** 
   7:.././simpleserial/simpleserial.c **** 
   8:.././simpleserial/simpleserial.c **** #define MAX_SS_CMDS 32
   9:.././simpleserial/simpleserial.c **** static int num_commands = 0;
  10:.././simpleserial/simpleserial.c **** 
  11:.././simpleserial/simpleserial.c **** 
  12:.././simpleserial/simpleserial.c **** //#define SS_VER_1_0 0
  13:.././simpleserial/simpleserial.c **** //#define SS_VER_1_1 1
  14:.././simpleserial/simpleserial.c **** //#define SS_VER_2_0 2
  15:.././simpleserial/simpleserial.c **** 
  16:.././simpleserial/simpleserial.c **** 
  17:.././simpleserial/simpleserial.c **** // 0xA6 formerly 
  18:.././simpleserial/simpleserial.c **** #define CW_CRC 0x4D 
  19:.././simpleserial/simpleserial.c **** uint8_t ss_crc(uint8_t *buf, uint8_t len)
  20:.././simpleserial/simpleserial.c **** {
  21:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  22:.././simpleserial/simpleserial.c **** 	uint8_t crc = 0x00;
  23:.././simpleserial/simpleserial.c **** 	while (len--) {
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  25:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  27:.././simpleserial/simpleserial.c **** 		}
  28:.././simpleserial/simpleserial.c **** 	}
  29:.././simpleserial/simpleserial.c **** 	return crc;
  30:.././simpleserial/simpleserial.c **** 
  31:.././simpleserial/simpleserial.c **** }
  32:.././simpleserial/simpleserial.c **** 
  33:.././simpleserial/simpleserial.c **** // [B_STUFF, CMD, SCMD, LEN, B_STUFF, DATA..., CRC, TERM]
  34:.././simpleserial/simpleserial.c **** 
  35:.././simpleserial/simpleserial.c **** //#define SS_VER SS_VER_2_0
  36:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_2_0
  37:.././simpleserial/simpleserial.c **** #error "SS_VER_2_0 is deprecated! Use SS_VER_2_1 instead."
  38:.././simpleserial/simpleserial.c **** #elif SS_VER == SS_VER_2_1
  39:.././simpleserial/simpleserial.c **** 
  40:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 249
  41:.././simpleserial/simpleserial.c **** 
  42:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
  43:.././simpleserial/simpleserial.c **** {
  44:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
  45:.././simpleserial/simpleserial.c **** 	{
  46:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
  47:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
  48:.././simpleserial/simpleserial.c **** 
  49:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
  50:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
  51:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
  52:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
  53:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
  54:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
  55:.././simpleserial/simpleserial.c **** 		else
  56:.././simpleserial/simpleserial.c **** 			return 1;
  57:.././simpleserial/simpleserial.c **** 
  58:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
  59:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
  60:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
  61:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
  62:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
  63:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
  64:.././simpleserial/simpleserial.c **** 		else
  65:.././simpleserial/simpleserial.c **** 			return 1;
  66:.././simpleserial/simpleserial.c **** 	}
  67:.././simpleserial/simpleserial.c **** 
  68:.././simpleserial/simpleserial.c **** 	return 0;
  69:.././simpleserial/simpleserial.c **** }
  70:.././simpleserial/simpleserial.c **** 
  71:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
  72:.././simpleserial/simpleserial.c **** {
  73:.././simpleserial/simpleserial.c **** 	char c;
  74:.././simpleserial/simpleserial.c **** 	unsigned int len;
  75:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
  76:.././simpleserial/simpleserial.c **** } ss_cmd;
  77:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  78:.././simpleserial/simpleserial.c **** 
  79:.././simpleserial/simpleserial.c **** void ss_puts(char *x)
  80:.././simpleserial/simpleserial.c **** {
  81:.././simpleserial/simpleserial.c **** 	do {
  82:.././simpleserial/simpleserial.c **** 		putch(*x);
  83:.././simpleserial/simpleserial.c **** 	} while (*++x);
  84:.././simpleserial/simpleserial.c **** }
  85:.././simpleserial/simpleserial.c **** 
  86:.././simpleserial/simpleserial.c **** #define FRAME_BYTE 0x00
  87:.././simpleserial/simpleserial.c **** 
  88:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  89:.././simpleserial/simpleserial.c **** {
  90:.././simpleserial/simpleserial.c **** 	uint8_t ver = SS_VER;
  91:.././simpleserial/simpleserial.c **** 	simpleserial_put('r', 1, &ver);
  92:.././simpleserial/simpleserial.c **** 	return SS_ERR_OK;
  93:.././simpleserial/simpleserial.c **** }
  94:.././simpleserial/simpleserial.c **** 
  95:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  96:.././simpleserial/simpleserial.c **** {
  97:.././simpleserial/simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
  98:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
  99:.././simpleserial/simpleserial.c ****         cmd_chars[i] = commands[i].c;
 100:.././simpleserial/simpleserial.c ****     }
 101:.././simpleserial/simpleserial.c **** 
 102:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 103:.././simpleserial/simpleserial.c ****     return 0x00;
 104:.././simpleserial/simpleserial.c **** 
 105:.././simpleserial/simpleserial.c **** }
 106:.././simpleserial/simpleserial.c **** 
 107:.././simpleserial/simpleserial.c **** uint8_t stuff_data(uint8_t *buf, uint8_t len)
 108:.././simpleserial/simpleserial.c **** {
 109:.././simpleserial/simpleserial.c **** 	uint8_t i = 1;
 110:.././simpleserial/simpleserial.c **** 	uint8_t last = 0;
 111:.././simpleserial/simpleserial.c **** 	for (; i < len; i++) {
 112:.././simpleserial/simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 113:.././simpleserial/simpleserial.c **** 			buf[last] = i - last;
 114:.././simpleserial/simpleserial.c **** 			last = i;
 115:.././simpleserial/simpleserial.c **** 		}
 116:.././simpleserial/simpleserial.c **** 	}
 117:.././simpleserial/simpleserial.c **** 	return 0x00;
 118:.././simpleserial/simpleserial.c **** }
 119:.././simpleserial/simpleserial.c **** 
 120:.././simpleserial/simpleserial.c **** uint8_t unstuff_data(uint8_t *buf, uint8_t len)
 121:.././simpleserial/simpleserial.c **** {
 122:.././simpleserial/simpleserial.c **** 	uint8_t next = buf[0];
 123:.././simpleserial/simpleserial.c **** 	buf[0] = 0x00;
 124:.././simpleserial/simpleserial.c **** 	//len -= 1;
 125:.././simpleserial/simpleserial.c **** 	uint8_t tmp = next;
 126:.././simpleserial/simpleserial.c **** 	while ((next < len) && tmp != 0) {
 127:.././simpleserial/simpleserial.c **** 		tmp = buf[next];
 128:.././simpleserial/simpleserial.c **** 		buf[next] = FRAME_BYTE;
 129:.././simpleserial/simpleserial.c **** 		next += tmp;
 130:.././simpleserial/simpleserial.c **** 	}
 131:.././simpleserial/simpleserial.c **** 	return next;
 132:.././simpleserial/simpleserial.c **** }
 133:.././simpleserial/simpleserial.c **** 
 134:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 135:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 136:.././simpleserial/simpleserial.c **** void simpleserial_init()
 137:.././simpleserial/simpleserial.c **** {
 138:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 139:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 140:.././simpleserial/simpleserial.c **** }
 141:.././simpleserial/simpleserial.c **** 
 142:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*
 143:.././simpleserial/simpleserial.c **** {
 144:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 145:.././simpleserial/simpleserial.c **** 		putch('a');
 146:.././simpleserial/simpleserial.c **** 		return 1;
 147:.././simpleserial/simpleserial.c **** 	}
 148:.././simpleserial/simpleserial.c **** 
 149:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN) {
 150:.././simpleserial/simpleserial.c **** 		putch('b');
 151:.././simpleserial/simpleserial.c **** 		return 1;
 152:.././simpleserial/simpleserial.c **** 	}
 153:.././simpleserial/simpleserial.c **** 
 154:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 155:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 156:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 157:.././simpleserial/simpleserial.c **** 	num_commands++;
 158:.././simpleserial/simpleserial.c **** 
 159:.././simpleserial/simpleserial.c **** 	return 0;
 160:.././simpleserial/simpleserial.c **** }
 161:.././simpleserial/simpleserial.c **** 
 162:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 163:.././simpleserial/simpleserial.c **** {
 164:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 165:.././simpleserial/simpleserial.c **** 	uint8_t err = 0;
 166:.././simpleserial/simpleserial.c **** 
 167:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < 4; i++) {
 168:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 169:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 170:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 171:.././simpleserial/simpleserial.c **** 			goto ERROR;
 172:.././simpleserial/simpleserial.c **** 		}
 173:.././simpleserial/simpleserial.c **** 	}
 174:.././simpleserial/simpleserial.c **** 	uint8_t next_frame = unstuff_data(data_buf, 4);
 175:.././simpleserial/simpleserial.c **** 
 176:.././simpleserial/simpleserial.c **** 	// check for valid command
 177:.././simpleserial/simpleserial.c **** 	uint8_t c = 0;
 178:.././simpleserial/simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 179:.././simpleserial/simpleserial.c **** 	{
 180:.././simpleserial/simpleserial.c **** 		if(commands[c].c == data_buf[1])
 181:.././simpleserial/simpleserial.c **** 			break;
 182:.././simpleserial/simpleserial.c **** 	}
 183:.././simpleserial/simpleserial.c **** 
 184:.././simpleserial/simpleserial.c **** 	if (c == num_commands) {
 185:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CMD;
 186:.././simpleserial/simpleserial.c **** 		goto ERROR;
 187:.././simpleserial/simpleserial.c **** 	}
 188:.././simpleserial/simpleserial.c **** 
 189:.././simpleserial/simpleserial.c **** 	//check that next frame not beyond end of message
 190:.././simpleserial/simpleserial.c **** 	// account for cmd, scmd, len, data, crc, end of frame
 191:.././simpleserial/simpleserial.c **** 	if ((data_buf[3] + 5) < next_frame) {
 192:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 193:.././simpleserial/simpleserial.c **** 		goto ERROR;
 194:.././simpleserial/simpleserial.c **** 	}
 195:.././simpleserial/simpleserial.c **** 
 196:.././simpleserial/simpleserial.c **** 	// read in data
 197:.././simpleserial/simpleserial.c **** 	// eq to len + crc + frame end
 198:.././simpleserial/simpleserial.c **** 	int i = 4;
 199:.././simpleserial/simpleserial.c **** 	for (; i < data_buf[3] + 5; i++) {
 200:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch();
 201:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 202:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 203:.././simpleserial/simpleserial.c **** 			goto ERROR;
 204:.././simpleserial/simpleserial.c **** 		}
 205:.././simpleserial/simpleserial.c **** 	}
 206:.././simpleserial/simpleserial.c **** 
 207:.././simpleserial/simpleserial.c **** 	//check that final byte is the FRAME_BYTE
 208:.././simpleserial/simpleserial.c **** 	data_buf[i] = getch();
 209:.././simpleserial/simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 210:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 211:.././simpleserial/simpleserial.c **** 		goto ERROR;
 212:.././simpleserial/simpleserial.c **** 	}
 213:.././simpleserial/simpleserial.c **** 
 214:.././simpleserial/simpleserial.c **** 	//fully unstuff data now
 215:.././simpleserial/simpleserial.c **** 	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 216:.././simpleserial/simpleserial.c **** 
 217:.././simpleserial/simpleserial.c **** 	//calc crc excluding original frame offset and frame end and crc
 218:.././simpleserial/simpleserial.c **** 	uint8_t crc = ss_crc(data_buf+1, i-2);
 219:.././simpleserial/simpleserial.c **** 	if (crc != data_buf[i-1]) {
 220:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CRC;
 221:.././simpleserial/simpleserial.c **** 		goto ERROR;
 222:.././simpleserial/simpleserial.c **** 	}
 223:.././simpleserial/simpleserial.c **** 
 224:.././simpleserial/simpleserial.c **** 	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 225:.././simpleserial/simpleserial.c **** 
 226:.././simpleserial/simpleserial.c **** ERROR:
 227:.././simpleserial/simpleserial.c **** 	simpleserial_put('e', 0x01, &err);
 228:.././simpleserial/simpleserial.c **** 	return;
 229:.././simpleserial/simpleserial.c **** }
 230:.././simpleserial/simpleserial.c **** 
 231:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 232:.././simpleserial/simpleserial.c **** {
 233:.././simpleserial/simpleserial.c ****     if (!output) return;
 234:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 235:.././simpleserial/simpleserial.c **** 	data_buf[0] = 0x00;
 236:.././simpleserial/simpleserial.c **** 	data_buf[1] = c;
 237:.././simpleserial/simpleserial.c **** 	data_buf[2] = size;
 238:.././simpleserial/simpleserial.c **** 	int i = 0;
 239:.././simpleserial/simpleserial.c **** 	for (; i < size; i++) {
 240:.././simpleserial/simpleserial.c **** 		data_buf[i + 3] = output[i];
 241:.././simpleserial/simpleserial.c **** 	}
 242:.././simpleserial/simpleserial.c **** 	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 243:.././simpleserial/simpleserial.c **** 	data_buf[i + 4] = 0x00;
 244:.././simpleserial/simpleserial.c **** 	stuff_data(data_buf, i + 5);
 245:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 246:.././simpleserial/simpleserial.c **** 		putch(data_buf[i]);
 247:.././simpleserial/simpleserial.c **** 	}
 248:.././simpleserial/simpleserial.c **** }
 249:.././simpleserial/simpleserial.c **** 
 250:.././simpleserial/simpleserial.c **** 
 251:.././simpleserial/simpleserial.c **** #else
 252:.././simpleserial/simpleserial.c **** 
 253:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 64
 254:.././simpleserial/simpleserial.c **** 
 255:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
 256:.././simpleserial/simpleserial.c **** {
 257:.././simpleserial/simpleserial.c **** 	char c;
 258:.././simpleserial/simpleserial.c **** 	unsigned int len;
 259:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t*, uint8_t);
 260:.././simpleserial/simpleserial.c **** 	uint8_t flags;
 261:.././simpleserial/simpleserial.c **** } ss_cmd;
 262:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
 263:.././simpleserial/simpleserial.c **** // Callback function for "v" command.
 264:.././simpleserial/simpleserial.c **** // This can exist in v1.0 as long as we don't actually send back an ack ("z")
 265:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t *v, uint8_t len)
 266:.././simpleserial/simpleserial.c **** {
  17               		.loc 1 266 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 267:.././simpleserial/simpleserial.c **** 	return SS_VER;
 268:.././simpleserial/simpleserial.c **** }
  24               		.loc 1 268 0
  25 0000 81E0      		ldi r24,lo8(1)
  26               	.LVL1:
  27 0002 0895      		ret
  28               		.cfi_endproc
  29               	.LFE12:
  31               	.global	ss_crc
  33               	ss_crc:
  34               	.LFB11:
  20:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  35               		.loc 1 20 0
  36               		.cfi_startproc
  37               	.LVL2:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42 0004 FC01      		movw r30,r24
  22:.././simpleserial/simpleserial.c **** 	while (len--) {
  43               		.loc 1 22 0
  44 0006 80E0      		ldi r24,0
  45               	.LVL3:
  26:.././simpleserial/simpleserial.c **** 		}
  46               		.loc 1 26 0
  47 0008 9DE4      		ldi r25,lo8(77)
  48               	.LVL4:
  49               	.L3:
  23:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  50               		.loc 1 23 0
  51               	.LVL5:
  52 000a 6150      		subi r22,1
  53 000c 00F0      		brcs .L10
  24:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  54               		.loc 1 24 0
  55 000e 2191      		ld r18,Z+
  56               	.LVL6:
  57 0010 8227      		eor r24,r18
  58               	.LVL7:
  59 0012 28E0      		ldi r18,lo8(8)
  60 0014 30E0      		ldi r19,0
  61               	.LVL8:
  62               	.L6:
  26:.././simpleserial/simpleserial.c **** 		}
  63               		.loc 1 26 0
  64 0016 87FF      		sbrs r24,7
  65 0018 00C0      		rjmp .L4
  26:.././simpleserial/simpleserial.c **** 		}
  66               		.loc 1 26 0 is_stmt 0 discriminator 1
  67 001a 880F      		lsl r24
  68               	.LVL9:
  69 001c 8927      		eor r24,r25
  70 001e 00C0      		rjmp .L5
  71               	.LVL10:
  72               	.L4:
  26:.././simpleserial/simpleserial.c **** 		}
  73               		.loc 1 26 0 discriminator 2
  74 0020 880F      		lsl r24
  75               	.LVL11:
  76               	.L5:
  77 0022 2150      		subi r18,1
  78 0024 3109      		sbc r19,__zero_reg__
  79               	.LVL12:
  25:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  80               		.loc 1 25 0 is_stmt 1 discriminator 4
  81 0026 01F4      		brne .L6
  82 0028 00C0      		rjmp .L3
  83               	.LVL13:
  84               	.L10:
  85               	/* epilogue start */
  31:.././simpleserial/simpleserial.c **** 
  86               		.loc 1 31 0
  87 002a 0895      		ret
  88               		.cfi_endproc
  89               	.LFE11:
  91               	.global	hex_decode
  93               	hex_decode:
  94               	.LFB15:
 269:.././simpleserial/simpleserial.c **** 
 270:.././simpleserial/simpleserial.c **** uint8_t ss_num_commands(uint8_t *x, uint8_t len)
 271:.././simpleserial/simpleserial.c **** {
 272:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 273:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 274:.././simpleserial/simpleserial.c ****     return 0x00;
 275:.././simpleserial/simpleserial.c **** }
 276:.././simpleserial/simpleserial.c **** 
 277:.././simpleserial/simpleserial.c **** typedef struct ss_cmd_repr {
 278:.././simpleserial/simpleserial.c ****     uint8_t c;
 279:.././simpleserial/simpleserial.c ****     uint8_t len;
 280:.././simpleserial/simpleserial.c ****     uint8_t flags;
 281:.././simpleserial/simpleserial.c **** } ss_cmd_repr;
 282:.././simpleserial/simpleserial.c **** 
 283:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t *x, uint8_t len)
 284:.././simpleserial/simpleserial.c **** {
 285:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 286:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 287:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 288:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 289:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 290:.././simpleserial/simpleserial.c ****     }
 291:.././simpleserial/simpleserial.c **** 
 292:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands * sizeof (ss_cmd_repr), (void *) repr_cmd_buf);
 293:.././simpleserial/simpleserial.c ****     return 0x00;
 294:.././simpleserial/simpleserial.c **** }
 295:.././simpleserial/simpleserial.c **** 
 296:.././simpleserial/simpleserial.c **** static char hex_lookup[16] =
 297:.././simpleserial/simpleserial.c **** {
 298:.././simpleserial/simpleserial.c **** 	'0', '1', '2', '3', '4', '5', '6', '7',
 299:.././simpleserial/simpleserial.c **** 	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
 300:.././simpleserial/simpleserial.c **** };
 301:.././simpleserial/simpleserial.c **** 
 302:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
 303:.././simpleserial/simpleserial.c **** {
  95               		.loc 1 303 0
  96               		.cfi_startproc
  97               	.LVL14:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 102 002c DB01      		movw r26,r22
 103               	.LBB3:
 304:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
 104               		.loc 1 304 0
 105 002e FA01      		movw r30,r20
 106               	.LVL15:
 107               	.L12:
 108               		.loc 1 304 0 is_stmt 0 discriminator 1
 109 0030 9F01      		movw r18,r30
 110 0032 241B      		sub r18,r20
 111 0034 350B      		sbc r19,r21
 112 0036 2817      		cp r18,r24
 113 0038 3907      		cpc r19,r25
 114 003a 04F4      		brge .L26
 115               	.LBB4:
 305:.././simpleserial/simpleserial.c **** 	{
 306:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
 116               		.loc 1 306 0 is_stmt 1
 117 003c 2C91      		ld r18,X
 118               	.LVL16:
 307:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 119               		.loc 1 307 0
 120 003e 1196      		adiw r26,1
 121 0040 3C91      		ld r19,X
 122 0042 1197      		sbiw r26,1
 123               	.LVL17:
 308:.././simpleserial/simpleserial.c **** 
 309:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
 124               		.loc 1 309 0
 125 0044 60ED      		ldi r22,lo8(-48)
 126 0046 630F      		add r22,r19
 127 0048 6A30      		cpi r22,lo8(10)
 128 004a 00F4      		brsh .L13
 310:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 129               		.loc 1 310 0
 130 004c 6083      		st Z,r22
 131 004e 00C0      		rjmp .L14
 132               	.L13:
 311:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 133               		.loc 1 311 0
 134 0050 6FEB      		ldi r22,lo8(-65)
 135 0052 630F      		add r22,r19
 136 0054 6630      		cpi r22,lo8(6)
 137 0056 00F4      		brsh .L15
 312:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 138               		.loc 1 312 0
 139 0058 3753      		subi r19,lo8(-(-55))
 140               	.LVL18:
 141 005a 00C0      		rjmp .L23
 142               	.LVL19:
 143               	.L15:
 313:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 144               		.loc 1 313 0
 145 005c 6FE9      		ldi r22,lo8(-97)
 146 005e 630F      		add r22,r19
 147 0060 6630      		cpi r22,lo8(6)
 148 0062 00F0      		brlo .L16
 149               	.LVL20:
 150               	.L21:
 314:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 315:.././simpleserial/simpleserial.c **** 		else
 316:.././simpleserial/simpleserial.c **** 			return 1;
 151               		.loc 1 316 0
 152 0064 81E0      		ldi r24,lo8(1)
 153 0066 90E0      		ldi r25,0
 154               	.LVL21:
 155 0068 0895      		ret
 156               	.LVL22:
 157               	.L16:
 314:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 158               		.loc 1 314 0
 159 006a 3755      		subi r19,lo8(-(-87))
 160               	.LVL23:
 161               	.L23:
 162 006c 3083      		st Z,r19
 163               	.LVL24:
 164               	.L14:
 317:.././simpleserial/simpleserial.c **** 
 318:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
 165               		.loc 1 318 0
 166 006e 30ED      		ldi r19,lo8(-48)
 167 0070 320F      		add r19,r18
 168 0072 3A30      		cpi r19,lo8(10)
 169 0074 00F4      		brsh .L18
 319:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 170               		.loc 1 319 0
 171 0076 2295      		swap r18
 172               	.LVL25:
 173 0078 207F      		andi r18,lo8(-16)
 174 007a 00C0      		rjmp .L24
 175               	.LVL26:
 176               	.L18:
 320:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 177               		.loc 1 320 0
 178 007c 3FEB      		ldi r19,lo8(-65)
 179 007e 320F      		add r19,r18
 180 0080 3630      		cpi r19,lo8(6)
 181 0082 00F4      		brsh .L20
 321:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 182               		.loc 1 321 0
 183 0084 30E0      		ldi r19,0
 184 0086 2753      		subi r18,55
 185 0088 3109      		sbc r19,__zero_reg__
 186               	.LVL27:
 187 008a 00C0      		rjmp .L25
 188               	.LVL28:
 189               	.L20:
 322:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 190               		.loc 1 322 0
 191 008c 3FE9      		ldi r19,lo8(-97)
 192 008e 320F      		add r19,r18
 193 0090 3630      		cpi r19,lo8(6)
 194 0092 00F4      		brsh .L21
 323:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 195               		.loc 1 323 0
 196 0094 30E0      		ldi r19,0
 197 0096 2755      		subi r18,87
 198 0098 3109      		sbc r19,__zero_reg__
 199               	.LVL29:
 200               	.L25:
 201 009a 64E0      		ldi r22,4
 202               		1:
 203 009c 220F      		lsl r18
 204 009e 331F      		rol r19
 205 00a0 6A95      		dec r22
 206 00a2 01F4      		brne 1b
 207               	.L24:
 208 00a4 3081      		ld r19,Z
 209 00a6 232B      		or r18,r19
 210 00a8 2083      		st Z,r18
 211               	.LVL30:
 212 00aa 3196      		adiw r30,1
 213               	.LVL31:
 214 00ac 1296      		adiw r26,2
 215 00ae 00C0      		rjmp .L12
 216               	.L26:
 217               	.LBE4:
 218               	.LBE3:
 324:.././simpleserial/simpleserial.c **** 		else
 325:.././simpleserial/simpleserial.c **** 			return 1;
 326:.././simpleserial/simpleserial.c **** 	}
 327:.././simpleserial/simpleserial.c **** 
 328:.././simpleserial/simpleserial.c **** 	return 0;
 219               		.loc 1 328 0
 220 00b0 80E0      		ldi r24,0
 221 00b2 90E0      		ldi r25,0
 222               	.LVL32:
 329:.././simpleserial/simpleserial.c **** }
 223               		.loc 1 329 0
 224 00b4 0895      		ret
 225               		.cfi_endproc
 226               	.LFE15:
 228               	.global	simpleserial_addcmd_flags
 230               	simpleserial_addcmd_flags:
 231               	.LFB18:
 330:.././simpleserial/simpleserial.c **** 
 331:.././simpleserial/simpleserial.c **** 
 332:.././simpleserial/simpleserial.c **** 
 333:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 334:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 335:.././simpleserial/simpleserial.c **** void simpleserial_init()
 336:.././simpleserial/simpleserial.c **** {
 337:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 338:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 339:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 340:.././simpleserial/simpleserial.c **** }
 341:.././simpleserial/simpleserial.c **** 
 342:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
 343:.././simpleserial/simpleserial.c **** {
 344:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 345:.././simpleserial/simpleserial.c **** }
 346:.././simpleserial/simpleserial.c **** 
 347:.././simpleserial/simpleserial.c **** int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t f
 348:.././simpleserial/simpleserial.c **** {
 232               		.loc 1 348 0
 233               		.cfi_startproc
 234               	.LVL33:
 235               	/* prologue: function */
 236               	/* frame size = 0 */
 237               	/* stack size = 0 */
 238               	.L__stack_usage = 0
 349:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 239               		.loc 1 349 0
 240 00b6 A091 0000 		lds r26,num_commands
 241 00ba B091 0000 		lds r27,num_commands+1
 242 00be A032      		cpi r26,32
 243 00c0 B105      		cpc r27,__zero_reg__
 244 00c2 04F4      		brge .L30
 350:.././simpleserial/simpleserial.c **** 		return 1;
 351:.././simpleserial/simpleserial.c **** 
 352:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN)
 245               		.loc 1 352 0
 246 00c4 6034      		cpi r22,64
 247 00c6 7105      		cpc r23,__zero_reg__
 248 00c8 00F4      		brsh .L30
 353:.././simpleserial/simpleserial.c **** 		return 1;
 354:.././simpleserial/simpleserial.c **** 
 355:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 249               		.loc 1 355 0
 250 00ca 96E0      		ldi r25,lo8(6)
 251 00cc 9A9F      		mul r25,r26
 252 00ce F001      		movw r30,r0
 253 00d0 9B9F      		mul r25,r27
 254 00d2 F00D      		add r31,r0
 255 00d4 1124      		clr __zero_reg__
 256 00d6 E050      		subi r30,lo8(-(commands))
 257 00d8 F040      		sbci r31,hi8(-(commands))
 258 00da 8083      		st Z,r24
 356:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 259               		.loc 1 356 0
 260 00dc 6183      		std Z+1,r22
 261 00de 7283      		std Z+2,r23
 357:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 262               		.loc 1 357 0
 263 00e0 4383      		std Z+3,r20
 264 00e2 5483      		std Z+4,r21
 358:.././simpleserial/simpleserial.c **** 	commands[num_commands].flags = fl;
 265               		.loc 1 358 0
 266 00e4 2583      		std Z+5,r18
 359:.././simpleserial/simpleserial.c **** 	num_commands++;
 267               		.loc 1 359 0
 268 00e6 1196      		adiw r26,1
 269 00e8 A093 0000 		sts num_commands,r26
 270 00ec B093 0000 		sts num_commands+1,r27
 360:.././simpleserial/simpleserial.c **** 
 361:.././simpleserial/simpleserial.c **** 	return 0;
 271               		.loc 1 361 0
 272 00f0 80E0      		ldi r24,0
 273 00f2 90E0      		ldi r25,0
 274               	.LVL34:
 275 00f4 0895      		ret
 276               	.LVL35:
 277               	.L30:
 350:.././simpleserial/simpleserial.c **** 
 278               		.loc 1 350 0
 279 00f6 81E0      		ldi r24,lo8(1)
 280 00f8 90E0      		ldi r25,0
 281               	.LVL36:
 362:.././simpleserial/simpleserial.c **** }
 282               		.loc 1 362 0
 283 00fa 0895      		ret
 284               		.cfi_endproc
 285               	.LFE18:
 287               	.global	simpleserial_addcmd
 289               	simpleserial_addcmd:
 290               	.LFB17:
 343:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 291               		.loc 1 343 0
 292               		.cfi_startproc
 293               	.LVL37:
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
 344:.././simpleserial/simpleserial.c **** }
 298               		.loc 1 344 0
 299 00fc 20E0      		ldi r18,0
 300 00fe 0C94 0000 		jmp simpleserial_addcmd_flags
 301               	.LVL38:
 302               		.cfi_endproc
 303               	.LFE17:
 305               	.global	simpleserial_init
 307               	simpleserial_init:
 308               	.LFB16:
 336:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 309               		.loc 1 336 0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 337:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 315               		.loc 1 337 0
 316 0102 40E0      		ldi r20,lo8(gs(check_version))
 317 0104 50E0      		ldi r21,hi8(gs(check_version))
 318 0106 60E0      		ldi r22,0
 319 0108 70E0      		ldi r23,0
 320 010a 86E7      		ldi r24,lo8(118)
 321 010c 0E94 0000 		call simpleserial_addcmd
 322               	.LVL39:
 338:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 323               		.loc 1 338 0
 324 0110 40E0      		ldi r20,lo8(gs(ss_get_commands))
 325 0112 50E0      		ldi r21,hi8(gs(ss_get_commands))
 326 0114 60E0      		ldi r22,0
 327 0116 70E0      		ldi r23,0
 328 0118 87E7      		ldi r24,lo8(119)
 329 011a 0E94 0000 		call simpleserial_addcmd
 330               	.LVL40:
 339:.././simpleserial/simpleserial.c **** }
 331               		.loc 1 339 0
 332 011e 40E0      		ldi r20,lo8(gs(ss_num_commands))
 333 0120 50E0      		ldi r21,hi8(gs(ss_num_commands))
 334 0122 60E0      		ldi r22,0
 335 0124 70E0      		ldi r23,0
 336 0126 89E7      		ldi r24,lo8(121)
 337 0128 0C94 0000 		jmp simpleserial_addcmd
 338               	.LVL41:
 339               		.cfi_endproc
 340               	.LFE16:
 342               	.global	simpleserial_put
 344               	simpleserial_put:
 345               	.LFB20:
 363:.././simpleserial/simpleserial.c **** 
 364:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 365:.././simpleserial/simpleserial.c **** {
 366:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 367:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 368:.././simpleserial/simpleserial.c **** 	char c;
 369:.././simpleserial/simpleserial.c **** 
 370:.././simpleserial/simpleserial.c **** 	// Find which command we're receiving
 371:.././simpleserial/simpleserial.c **** 	c = getch();
 372:.././simpleserial/simpleserial.c **** 
 373:.././simpleserial/simpleserial.c **** 	int cmd;
 374:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
 375:.././simpleserial/simpleserial.c **** 	{
 376:.././simpleserial/simpleserial.c **** 		if(commands[cmd].c == c)
 377:.././simpleserial/simpleserial.c **** 			break;
 378:.././simpleserial/simpleserial.c **** 	}
 379:.././simpleserial/simpleserial.c **** 
 380:.././simpleserial/simpleserial.c **** 	// If we didn't find a match, give up right away
 381:.././simpleserial/simpleserial.c **** 	if(cmd == num_commands)
 382:.././simpleserial/simpleserial.c **** 		return;
 383:.././simpleserial/simpleserial.c **** 
 384:.././simpleserial/simpleserial.c **** 	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
 385:.././simpleserial/simpleserial.c **** 	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 386:.././simpleserial/simpleserial.c **** 	{
 387:.././simpleserial/simpleserial.c **** 		uint8_t l = 0;
 388:.././simpleserial/simpleserial.c **** 		char buff[2];
 389:.././simpleserial/simpleserial.c **** 		buff[0] = getch();
 390:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 391:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 392:.././simpleserial/simpleserial.c **** 			return;
 393:.././simpleserial/simpleserial.c **** 		commands[cmd].len = l;
 394:.././simpleserial/simpleserial.c **** 	}
 395:.././simpleserial/simpleserial.c **** 
 396:.././simpleserial/simpleserial.c **** 	// Receive characters until we fill the ASCII buffer
 397:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < 2*commands[cmd].len; i++)
 398:.././simpleserial/simpleserial.c **** 	{
 399:.././simpleserial/simpleserial.c **** 		c = getch();
 400:.././simpleserial/simpleserial.c **** 
 401:.././simpleserial/simpleserial.c **** 		// Check for early \n
 402:.././simpleserial/simpleserial.c **** 		if(c == '\n' || c == '\r')
 403:.././simpleserial/simpleserial.c **** 			return;
 404:.././simpleserial/simpleserial.c **** 
 405:.././simpleserial/simpleserial.c **** 		ascii_buf[i] = c;
 406:.././simpleserial/simpleserial.c **** 	}
 407:.././simpleserial/simpleserial.c **** 
 408:.././simpleserial/simpleserial.c **** 	// Assert that last character is \n or \r
 409:.././simpleserial/simpleserial.c **** 	c = getch();
 410:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 411:.././simpleserial/simpleserial.c **** 		return;
 412:.././simpleserial/simpleserial.c **** 
 413:.././simpleserial/simpleserial.c **** 	// ASCII buffer is full: convert to bytes
 414:.././simpleserial/simpleserial.c **** 	// Check for illegal characters here
 415:.././simpleserial/simpleserial.c **** 	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 416:.././simpleserial/simpleserial.c **** 		return;
 417:.././simpleserial/simpleserial.c **** 
 418:.././simpleserial/simpleserial.c **** 	// Callback
 419:.././simpleserial/simpleserial.c **** 	uint8_t ret[1];
 420:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 421:.././simpleserial/simpleserial.c **** 
 422:.././simpleserial/simpleserial.c **** 	// Acknowledge (if version is 1.1)
 423:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_1_1
 424:.././simpleserial/simpleserial.c **** 	simpleserial_put('z', 1, ret);
 425:.././simpleserial/simpleserial.c **** #endif
 426:.././simpleserial/simpleserial.c **** }
 427:.././simpleserial/simpleserial.c **** 
 428:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 429:.././simpleserial/simpleserial.c **** {
 346               		.loc 1 429 0
 347               		.cfi_startproc
 348               	.LVL42:
 349 012c CF92      		push r12
 350               	.LCFI0:
 351               		.cfi_def_cfa_offset 4
 352               		.cfi_offset 12, -3
 353 012e DF92      		push r13
 354               	.LCFI1:
 355               		.cfi_def_cfa_offset 5
 356               		.cfi_offset 13, -4
 357 0130 EF92      		push r14
 358               	.LCFI2:
 359               		.cfi_def_cfa_offset 6
 360               		.cfi_offset 14, -5
 361 0132 FF92      		push r15
 362               	.LCFI3:
 363               		.cfi_def_cfa_offset 7
 364               		.cfi_offset 15, -6
 365 0134 0F93      		push r16
 366               	.LCFI4:
 367               		.cfi_def_cfa_offset 8
 368               		.cfi_offset 16, -7
 369 0136 1F93      		push r17
 370               	.LCFI5:
 371               		.cfi_def_cfa_offset 9
 372               		.cfi_offset 17, -8
 373 0138 CF93      		push r28
 374               	.LCFI6:
 375               		.cfi_def_cfa_offset 10
 376               		.cfi_offset 28, -9
 377 013a DF93      		push r29
 378               	.LCFI7:
 379               		.cfi_def_cfa_offset 11
 380               		.cfi_offset 29, -10
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 8 */
 384               	.L__stack_usage = 8
 430:.././simpleserial/simpleserial.c **** 	// Write first character
 431:.././simpleserial/simpleserial.c ****     if (!output) return;
 385               		.loc 1 431 0
 386 013c 4115      		cp r20,__zero_reg__
 387 013e 5105      		cpc r21,__zero_reg__
 388 0140 01F0      		breq .L33
 389 0142 8A01      		movw r16,r20
 390 0144 C62F      		mov r28,r22
 432:.././simpleserial/simpleserial.c **** 	putch(c);
 391               		.loc 1 432 0
 392 0146 0E94 0000 		call output_ch_0
 393               	.LVL43:
 394 014a 7801      		movw r14,r16
 395               	.LBB8:
 396               	.LBB9:
 397               	.LBB10:
 433:.././simpleserial/simpleserial.c **** 
 434:.././simpleserial/simpleserial.c **** 	// Write each byte as two nibbles
 435:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < size; i++)
 398               		.loc 1 435 0
 399 014c D0E0      		ldi r29,0
 400               	.L35:
 401               	.LVL44:
 402 014e C701      		movw r24,r14
 403 0150 801B      		sub r24,r16
 404 0152 910B      		sbc r25,r17
 405 0154 8C17      		cp r24,r28
 406 0156 9D07      		cpc r25,r29
 407 0158 04F4      		brge .L37
 408 015a 6701      		movw r12,r14
 436:.././simpleserial/simpleserial.c **** 	{
 437:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] >> 4 ]);
 409               		.loc 1 437 0
 410 015c D701      		movw r26,r14
 411 015e ED91      		ld r30,X+
 412 0160 7D01      		movw r14,r26
 413               	.LVL45:
 414 0162 E295      		swap r30
 415 0164 EF70      		andi r30,lo8(15)
 416 0166 F0E0      		ldi r31,0
 417 0168 E050      		subi r30,lo8(-(hex_lookup))
 418 016a F040      		sbci r31,hi8(-(hex_lookup))
 419 016c 8081      		ld r24,Z
 420 016e 0E94 0000 		call output_ch_0
 421               	.LVL46:
 438:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 422               		.loc 1 438 0
 423 0172 D601      		movw r26,r12
 424 0174 EC91      		ld r30,X
 425 0176 EF70      		andi r30,lo8(15)
 426 0178 F0E0      		ldi r31,0
 427 017a E050      		subi r30,lo8(-(hex_lookup))
 428 017c F040      		sbci r31,hi8(-(hex_lookup))
 429 017e 8081      		ld r24,Z
 430 0180 0E94 0000 		call output_ch_0
 431               	.LVL47:
 432 0184 00C0      		rjmp .L35
 433               	.L37:
 434               	.LBE10:
 439:.././simpleserial/simpleserial.c **** 	}
 440:.././simpleserial/simpleserial.c **** 
 441:.././simpleserial/simpleserial.c **** 	// Write trailing '\n'
 442:.././simpleserial/simpleserial.c **** 	putch('\n');
 435               		.loc 1 442 0
 436 0186 8AE0      		ldi r24,lo8(10)
 437               	/* epilogue start */
 438               	.LBE9:
 439               	.LBE8:
 443:.././simpleserial/simpleserial.c **** }
 440               		.loc 1 443 0
 441 0188 DF91      		pop r29
 442 018a CF91      		pop r28
 443               	.LVL48:
 444 018c 1F91      		pop r17
 445 018e 0F91      		pop r16
 446               	.LVL49:
 447 0190 FF90      		pop r15
 448 0192 EF90      		pop r14
 449               	.LVL50:
 450 0194 DF90      		pop r13
 451 0196 CF90      		pop r12
 452               	.LBB12:
 453               	.LBB11:
 442:.././simpleserial/simpleserial.c **** }
 454               		.loc 1 442 0
 455 0198 0C94 0000 		jmp output_ch_0
 456               	.LVL51:
 457               	.L33:
 458               	/* epilogue start */
 459               	.LBE11:
 460               	.LBE12:
 461               		.loc 1 443 0
 462 019c DF91      		pop r29
 463 019e CF91      		pop r28
 464 01a0 1F91      		pop r17
 465 01a2 0F91      		pop r16
 466 01a4 FF90      		pop r15
 467 01a6 EF90      		pop r14
 468 01a8 DF90      		pop r13
 469 01aa CF90      		pop r12
 470 01ac 0895      		ret
 471               		.cfi_endproc
 472               	.LFE20:
 474               	.global	ss_num_commands
 476               	ss_num_commands:
 477               	.LFB13:
 271:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 478               		.loc 1 271 0
 479               		.cfi_startproc
 480               	.LVL52:
 481 01ae CF93      		push r28
 482               	.LCFI8:
 483               		.cfi_def_cfa_offset 4
 484               		.cfi_offset 28, -3
 485 01b0 DF93      		push r29
 486               	.LCFI9:
 487               		.cfi_def_cfa_offset 5
 488               		.cfi_offset 29, -4
 489 01b2 1F92      		push __zero_reg__
 490               	.LCFI10:
 491               		.cfi_def_cfa_offset 6
 492 01b4 CDB7      		in r28,__SP_L__
 493 01b6 DEB7      		in r29,__SP_H__
 494               	.LCFI11:
 495               		.cfi_def_cfa_register 28
 496               	/* prologue: function */
 497               	/* frame size = 1 */
 498               	/* stack size = 3 */
 499               	.L__stack_usage = 3
 272:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 500               		.loc 1 272 0
 501 01b8 8091 0000 		lds r24,num_commands
 502               	.LVL53:
 503 01bc 8983      		std Y+1,r24
 273:.././simpleserial/simpleserial.c ****     return 0x00;
 504               		.loc 1 273 0
 505 01be AE01      		movw r20,r28
 506 01c0 4F5F      		subi r20,-1
 507 01c2 5F4F      		sbci r21,-1
 508 01c4 61E0      		ldi r22,lo8(1)
 509               	.LVL54:
 510 01c6 82E7      		ldi r24,lo8(114)
 511 01c8 0E94 0000 		call simpleserial_put
 512               	.LVL55:
 275:.././simpleserial/simpleserial.c **** 
 513               		.loc 1 275 0
 514 01cc 80E0      		ldi r24,0
 515               	/* epilogue start */
 516 01ce 0F90      		pop __tmp_reg__
 517 01d0 DF91      		pop r29
 518 01d2 CF91      		pop r28
 519 01d4 0895      		ret
 520               		.cfi_endproc
 521               	.LFE13:
 523               	.global	ss_get_commands
 525               	ss_get_commands:
 526               	.LFB14:
 284:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 527               		.loc 1 284 0
 528               		.cfi_startproc
 529               	.LVL56:
 530 01d6 CF93      		push r28
 531               	.LCFI12:
 532               		.cfi_def_cfa_offset 4
 533               		.cfi_offset 28, -3
 534 01d8 DF93      		push r29
 535               	.LCFI13:
 536               		.cfi_def_cfa_offset 5
 537               		.cfi_offset 29, -4
 538 01da CDB7      		in r28,__SP_L__
 539 01dc DEB7      		in r29,__SP_H__
 540               	.LCFI14:
 541               		.cfi_def_cfa_register 28
 542 01de C056      		subi r28,96
 543 01e0 D109      		sbc r29,__zero_reg__
 544               	.LCFI15:
 545               		.cfi_def_cfa_offset 101
 546 01e2 CDBF      		out __SP_L__,r28
 547 01e4 DEBF      		out __SP_H__,r29
 548               	/* prologue: function */
 549               	/* frame size = 96 */
 550               	/* stack size = 98 */
 551               	.L__stack_usage = 98
 552               	.LVL57:
 553               	.LBB13:
 286:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 554               		.loc 1 286 0
 555 01e6 6091 0000 		lds r22,num_commands
 556 01ea 7091 0000 		lds r23,num_commands+1
 557               	.LVL58:
 558 01ee AB01      		movw r20,r22
 559 01f0 5527      		clr r21
 560 01f2 20E0      		ldi r18,0
 287:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 561               		.loc 1 287 0
 562 01f4 36E0      		ldi r19,lo8(6)
 563               	.LVL59:
 564               	.L40:
 286:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 565               		.loc 1 286 0 discriminator 1
 566 01f6 822F      		mov r24,r18
 567 01f8 90E0      		ldi r25,0
 568 01fa 8417      		cp r24,r20
 569 01fc 9507      		cpc r25,r21
 570 01fe 04F4      		brge .L42
 287:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 571               		.loc 1 287 0 discriminator 3
 572 0200 FC01      		movw r30,r24
 573 0202 EE0F      		lsl r30
 574 0204 FF1F      		rol r31
 575 0206 E80F      		add r30,r24
 576 0208 F91F      		adc r31,r25
 577 020a A1E0      		ldi r26,lo8(1)
 578 020c B0E0      		ldi r27,0
 579 020e AC0F      		add r26,r28
 580 0210 BD1F      		adc r27,r29
 581 0212 EA0F      		add r30,r26
 582 0214 FB1F      		adc r31,r27
 583 0216 389F      		mul r19,r24
 584 0218 D001      		movw r26,r0
 585 021a 399F      		mul r19,r25
 586 021c B00D      		add r27,r0
 587 021e 1124      		clr __zero_reg__
 588 0220 A050      		subi r26,lo8(-(commands))
 589 0222 B040      		sbci r27,hi8(-(commands))
 590 0224 8C91      		ld r24,X
 591 0226 8083      		st Z,r24
 288:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 592               		.loc 1 288 0 discriminator 3
 593 0228 1196      		adiw r26,1
 594 022a 8C91      		ld r24,X
 595 022c 1197      		sbiw r26,1
 596 022e 8183      		std Z+1,r24
 289:.././simpleserial/simpleserial.c ****     }
 597               		.loc 1 289 0 discriminator 3
 598 0230 1596      		adiw r26,5
 599 0232 8C91      		ld r24,X
 600 0234 8283      		std Z+2,r24
 286:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 601               		.loc 1 286 0 discriminator 3
 602 0236 2F5F      		subi r18,lo8(-(1))
 603               	.LVL60:
 604 0238 00C0      		rjmp .L40
 605               	.L42:
 606               	.LBE13:
 292:.././simpleserial/simpleserial.c ****     return 0x00;
 607               		.loc 1 292 0
 608 023a 862F      		mov r24,r22
 609 023c 880F      		lsl r24
 610 023e 680F      		add r22,r24
 611 0240 AE01      		movw r20,r28
 612 0242 4F5F      		subi r20,-1
 613 0244 5F4F      		sbci r21,-1
 614 0246 82E7      		ldi r24,lo8(114)
 615 0248 0E94 0000 		call simpleserial_put
 616               	.LVL61:
 294:.././simpleserial/simpleserial.c **** 
 617               		.loc 1 294 0
 618 024c 80E0      		ldi r24,0
 619               	/* epilogue start */
 620 024e C05A      		subi r28,-96
 621 0250 DF4F      		sbci r29,-1
 622 0252 CDBF      		out __SP_L__,r28
 623 0254 DEBF      		out __SP_H__,r29
 624 0256 DF91      		pop r29
 625 0258 CF91      		pop r28
 626 025a 0895      		ret
 627               		.cfi_endproc
 628               	.LFE14:
 630               	.global	simpleserial_get
 632               	simpleserial_get:
 633               	.LFB19:
 365:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 634               		.loc 1 365 0
 635               		.cfi_startproc
 636 025c AF92      		push r10
 637               	.LCFI16:
 638               		.cfi_def_cfa_offset 4
 639               		.cfi_offset 10, -3
 640 025e BF92      		push r11
 641               	.LCFI17:
 642               		.cfi_def_cfa_offset 5
 643               		.cfi_offset 11, -4
 644 0260 CF92      		push r12
 645               	.LCFI18:
 646               		.cfi_def_cfa_offset 6
 647               		.cfi_offset 12, -5
 648 0262 DF92      		push r13
 649               	.LCFI19:
 650               		.cfi_def_cfa_offset 7
 651               		.cfi_offset 13, -6
 652 0264 EF92      		push r14
 653               	.LCFI20:
 654               		.cfi_def_cfa_offset 8
 655               		.cfi_offset 14, -7
 656 0266 FF92      		push r15
 657               	.LCFI21:
 658               		.cfi_def_cfa_offset 9
 659               		.cfi_offset 15, -8
 660 0268 0F93      		push r16
 661               	.LCFI22:
 662               		.cfi_def_cfa_offset 10
 663               		.cfi_offset 16, -9
 664 026a 1F93      		push r17
 665               	.LCFI23:
 666               		.cfi_def_cfa_offset 11
 667               		.cfi_offset 17, -10
 668 026c CF93      		push r28
 669               	.LCFI24:
 670               		.cfi_def_cfa_offset 12
 671               		.cfi_offset 28, -11
 672 026e DF93      		push r29
 673               	.LCFI25:
 674               		.cfi_def_cfa_offset 13
 675               		.cfi_offset 29, -12
 676 0270 CDB7      		in r28,__SP_L__
 677 0272 DEB7      		in r29,__SP_H__
 678               	.LCFI26:
 679               		.cfi_def_cfa_register 28
 680 0274 C15C      		subi r28,-63
 681 0276 D109      		sbc r29,__zero_reg__
 682               	.LCFI27:
 683               		.cfi_def_cfa_offset 206
 684 0278 CDBF      		out __SP_L__,r28
 685 027a DEBF      		out __SP_H__,r29
 686               	/* prologue: function */
 687               	/* frame size = 193 */
 688               	/* stack size = 203 */
 689               	.L__stack_usage = 203
 371:.././simpleserial/simpleserial.c **** 
 690               		.loc 1 371 0
 691 027c 0E94 0000 		call input_ch_0
 692               	.LVL62:
 374:.././simpleserial/simpleserial.c **** 	{
 693               		.loc 1 374 0
 694 0280 4091 0000 		lds r20,num_commands
 695 0284 5091 0000 		lds r21,num_commands+1
 696 0288 20E0      		ldi r18,lo8(commands)
 697 028a 30E0      		ldi r19,hi8(commands)
 698 028c 00E0      		ldi r16,0
 699 028e 10E0      		ldi r17,0
 700               	.LVL63:
 701               	.L44:
 374:.././simpleserial/simpleserial.c **** 	{
 702               		.loc 1 374 0 is_stmt 0 discriminator 1
 703 0290 0417      		cp r16,r20
 704 0292 1507      		cpc r17,r21
 705 0294 04F4      		brge .L66
 706 0296 2A5F      		subi r18,-6
 707 0298 3F4F      		sbci r19,-1
 376:.././simpleserial/simpleserial.c **** 			break;
 708               		.loc 1 376 0 is_stmt 1
 709 029a F901      		movw r30,r18
 710 029c 3697      		sbiw r30,6
 711 029e 9081      		ld r25,Z
 712 02a0 8913      		cpse r24,r25
 713 02a2 00C0      		rjmp .L45
 714               	.L50:
 385:.././simpleserial/simpleserial.c **** 	{
 715               		.loc 1 385 0
 716 02a4 26E0      		ldi r18,lo8(6)
 717 02a6 209F      		mul r18,r16
 718 02a8 C001      		movw r24,r0
 719 02aa 219F      		mul r18,r17
 720 02ac 900D      		add r25,r0
 721 02ae 1124      		clr __zero_reg__
 722               	.LVL64:
 723 02b0 9C01      		movw r18,r24
 724 02b2 2050      		subi r18,lo8(-(commands))
 725 02b4 3040      		sbci r19,hi8(-(commands))
 726 02b6 6901      		movw r12,r18
 727 02b8 D901      		movw r26,r18
 728 02ba 1596      		adiw r26,5
 729 02bc 8C91      		ld r24,X
 730 02be FE01      		movw r30,r28
 731 02c0 3196      		adiw r30,1
 732 02c2 7F01      		movw r14,r30
 733 02c4 80FF      		sbrs r24,0
 734 02c6 00C0      		rjmp .L47
 735 02c8 00C0      		rjmp .L67
 736               	.LVL65:
 737               	.L45:
 374:.././simpleserial/simpleserial.c **** 	{
 738               		.loc 1 374 0 discriminator 2
 739 02ca 0F5F      		subi r16,-1
 740 02cc 1F4F      		sbci r17,-1
 741               	.LVL66:
 742 02ce 00C0      		rjmp .L44
 743               	.L66:
 381:.././simpleserial/simpleserial.c **** 		return;
 744               		.loc 1 381 0
 745 02d0 0417      		cp r16,r20
 746 02d2 1507      		cpc r17,r21
 747 02d4 01F4      		brne .+2
 748 02d6 00C0      		rjmp .L43
 749 02d8 00C0      		rjmp .L50
 750               	.LVL67:
 751               	.L67:
 752               	.LBB14:
 387:.././simpleserial/simpleserial.c **** 		char buff[2];
 753               		.loc 1 387 0
 754 02da CF57      		subi r28,lo8(-129)
 755 02dc DF4F      		sbci r29,hi8(-129)
 756 02de 1882      		st Y,__zero_reg__
 757 02e0 C158      		subi r28,lo8(129)
 758 02e2 D040      		sbci r29,hi8(129)
 389:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 759               		.loc 1 389 0
 760 02e4 0E94 0000 		call input_ch_0
 761               	.LVL68:
 762 02e8 8983      		std Y+1,r24
 390:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 763               		.loc 1 390 0
 764 02ea 0E94 0000 		call input_ch_0
 765               	.LVL69:
 766 02ee 8A83      		std Y+2,r24
 391:.././simpleserial/simpleserial.c **** 			return;
 767               		.loc 1 391 0
 768 02f0 AE01      		movw r20,r28
 769 02f2 4F57      		subi r20,127
 770 02f4 5F4F      		sbci r21,-1
 771 02f6 B701      		movw r22,r14
 772 02f8 81E0      		ldi r24,lo8(1)
 773 02fa 90E0      		ldi r25,0
 774 02fc 0E94 0000 		call hex_decode
 775               	.LVL70:
 776 0300 892B      		or r24,r25
 777 0302 01F0      		breq .+2
 778 0304 00C0      		rjmp .L43
 393:.././simpleserial/simpleserial.c **** 	}
 779               		.loc 1 393 0
 780 0306 CF57      		subi r28,lo8(-129)
 781 0308 DF4F      		sbci r29,hi8(-129)
 782 030a 8881      		ld r24,Y
 783 030c C158      		subi r28,lo8(129)
 784 030e D040      		sbci r29,hi8(129)
 785 0310 90E0      		ldi r25,0
 786 0312 D601      		movw r26,r12
 787 0314 1196      		adiw r26,1
 788 0316 8D93      		st X+,r24
 789 0318 9C93      		st X,r25
 790 031a 1297      		sbiw r26,1+1
 791               	.L47:
 792               	.LBE14:
 374:.././simpleserial/simpleserial.c **** 	{
 793               		.loc 1 374 0 discriminator 1
 794 031c 6701      		movw r12,r14
 795               	.LBB15:
 397:.././simpleserial/simpleserial.c **** 	{
 796               		.loc 1 397 0 discriminator 1
 797 031e 26E0      		ldi r18,lo8(6)
 798 0320 209F      		mul r18,r16
 799 0322 C001      		movw r24,r0
 800 0324 219F      		mul r18,r17
 801 0326 900D      		add r25,r0
 802 0328 1124      		clr __zero_reg__
 803 032a FC01      		movw r30,r24
 804 032c E050      		subi r30,lo8(-(commands+1))
 805 032e F040      		sbci r31,hi8(-(commands+1))
 806 0330 5F01      		movw r10,r30
 807               	.L52:
 808 0332 F501      		movw r30,r10
 809 0334 8081      		ld r24,Z
 810 0336 9181      		ldd r25,Z+1
 811 0338 880F      		lsl r24
 812 033a 991F      		rol r25
 813 033c 9601      		movw r18,r12
 814 033e 2E19      		sub r18,r14
 815 0340 3F09      		sbc r19,r15
 816 0342 2817      		cp r18,r24
 817 0344 3907      		cpc r19,r25
 818 0346 00F4      		brsh .L68
 399:.././simpleserial/simpleserial.c **** 
 819               		.loc 1 399 0
 820 0348 0E94 0000 		call input_ch_0
 821               	.LVL71:
 402:.././simpleserial/simpleserial.c **** 			return;
 822               		.loc 1 402 0
 823 034c 8A30      		cpi r24,lo8(10)
 824 034e 01F0      		breq .L43
 402:.././simpleserial/simpleserial.c **** 			return;
 825               		.loc 1 402 0 is_stmt 0 discriminator 1
 826 0350 8D30      		cpi r24,lo8(13)
 827 0352 01F0      		breq .L43
 405:.././simpleserial/simpleserial.c **** 	}
 828               		.loc 1 405 0 is_stmt 1 discriminator 2
 829 0354 D601      		movw r26,r12
 830 0356 8D93      		st X+,r24
 831 0358 6D01      		movw r12,r26
 832 035a 00C0      		rjmp .L52
 833               	.LVL72:
 834               	.L68:
 835               	.LBE15:
 409:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 836               		.loc 1 409 0
 837 035c 0E94 0000 		call input_ch_0
 838               	.LVL73:
 410:.././simpleserial/simpleserial.c **** 		return;
 839               		.loc 1 410 0
 840 0360 8A30      		cpi r24,lo8(10)
 841 0362 01F0      		breq .L55
 410:.././simpleserial/simpleserial.c **** 		return;
 842               		.loc 1 410 0 is_stmt 0 discriminator 1
 843 0364 8D30      		cpi r24,lo8(13)
 844 0366 01F4      		brne .L43
 845               	.L55:
 415:.././simpleserial/simpleserial.c **** 		return;
 846               		.loc 1 415 0 is_stmt 1
 847 0368 26E0      		ldi r18,lo8(6)
 848 036a 209F      		mul r18,r16
 849 036c C001      		movw r24,r0
 850 036e 219F      		mul r18,r17
 851 0370 900D      		add r25,r0
 852 0372 1124      		clr __zero_reg__
 853               	.LVL74:
 854 0374 8C01      		movw r16,r24
 855               	.LVL75:
 856 0376 0050      		subi r16,lo8(-(commands))
 857 0378 1040      		sbci r17,hi8(-(commands))
 858 037a D801      		movw r26,r16
 859 037c 1196      		adiw r26,1
 860 037e DC90      		ld r13,X
 861 0380 1197      		sbiw r26,1
 862 0382 AE01      		movw r20,r28
 863 0384 4F57      		subi r20,127
 864 0386 5F4F      		sbci r21,-1
 865 0388 B701      		movw r22,r14
 866 038a 8D2D      		mov r24,r13
 867 038c 1296      		adiw r26,2
 868 038e 9C91      		ld r25,X
 869 0390 0E94 0000 		call hex_decode
 870               	.LVL76:
 871 0394 892B      		or r24,r25
 872 0396 01F4      		brne .L43
 420:.././simpleserial/simpleserial.c **** 
 873               		.loc 1 420 0
 874 0398 D801      		movw r26,r16
 875 039a 1396      		adiw r26,3
 876 039c ED91      		ld r30,X+
 877 039e FC91      		ld r31,X
 878 03a0 1497      		sbiw r26,3+1
 879 03a2 6D2D      		mov r22,r13
 880 03a4 CE01      		movw r24,r28
 881 03a6 8F57      		subi r24,127
 882 03a8 9F4F      		sbci r25,-1
 883 03aa 1995      		eicall
 884               	.LVL77:
 885 03ac CF53      		subi r28,lo8(-193)
 886 03ae DF4F      		sbci r29,hi8(-193)
 887 03b0 8883      		st Y,r24
 888 03b2 C15C      		subi r28,lo8(193)
 889 03b4 D040      		sbci r29,hi8(193)
 424:.././simpleserial/simpleserial.c **** #endif
 890               		.loc 1 424 0
 891 03b6 AE01      		movw r20,r28
 892 03b8 4F53      		subi r20,63
 893 03ba 5F4F      		sbci r21,-1
 894 03bc 61E0      		ldi r22,lo8(1)
 895 03be 8AE7      		ldi r24,lo8(122)
 896 03c0 0E94 0000 		call simpleserial_put
 897               	.LVL78:
 898               	.L43:
 899               	/* epilogue start */
 426:.././simpleserial/simpleserial.c **** 
 900               		.loc 1 426 0
 901 03c4 CF53      		subi r28,63
 902 03c6 DF4F      		sbci r29,-1
 903 03c8 CDBF      		out __SP_L__,r28
 904 03ca DEBF      		out __SP_H__,r29
 905 03cc DF91      		pop r29
 906 03ce CF91      		pop r28
 907 03d0 1F91      		pop r17
 908 03d2 0F91      		pop r16
 909 03d4 FF90      		pop r15
 910 03d6 EF90      		pop r14
 911 03d8 DF90      		pop r13
 912 03da CF90      		pop r12
 913 03dc BF90      		pop r11
 914 03de AF90      		pop r10
 915 03e0 0895      		ret
 916               		.cfi_endproc
 917               	.LFE19:
 919               		.section	.rodata
 922               	hex_lookup:
 923 0000 30        		.byte	48
 924 0001 31        		.byte	49
 925 0002 32        		.byte	50
 926 0003 33        		.byte	51
 927 0004 34        		.byte	52
 928 0005 35        		.byte	53
 929 0006 36        		.byte	54
 930 0007 37        		.byte	55
 931 0008 38        		.byte	56
 932 0009 39        		.byte	57
 933 000a 41        		.byte	65
 934 000b 42        		.byte	66
 935 000c 43        		.byte	67
 936 000d 44        		.byte	68
 937 000e 45        		.byte	69
 938 000f 46        		.byte	70
 939               		.local	commands
 940               		.comm	commands,192,1
 941               		.local	num_commands
 942               		.comm	num_commands,2,1
 943               		.text
 944               	.Letext0:
 945               		.file 2 "/usr/lib/avr/include/stdint.h"
 946               		.file 3 ".././hal/xmega/uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/ccj3spav.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccj3spav.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccj3spav.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccj3spav.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccj3spav.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/ccj3spav.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccj3spav.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccj3spav.s:14     .text:0000000000000000 check_version
     /tmp/ccj3spav.s:33     .text:0000000000000004 ss_crc
     /tmp/ccj3spav.s:93     .text:000000000000002c hex_decode
     /tmp/ccj3spav.s:230    .text:00000000000000b6 simpleserial_addcmd_flags
     /tmp/ccj3spav.s:940    .bss:00000000000000c0 num_commands
                             .bss:0000000000000000 commands
     /tmp/ccj3spav.s:289    .text:00000000000000fc simpleserial_addcmd
     /tmp/ccj3spav.s:307    .text:0000000000000102 simpleserial_init
     /tmp/ccj3spav.s:525    .text:00000000000001d6 ss_get_commands
     /tmp/ccj3spav.s:476    .text:00000000000001ae ss_num_commands
     /tmp/ccj3spav.s:344    .text:000000000000012c simpleserial_put
     /tmp/ccj3spav.s:922    .rodata:0000000000000000 hex_lookup
     /tmp/ccj3spav.s:632    .text:000000000000025c simpleserial_get

UNDEFINED SYMBOLS
output_ch_0
input_ch_0
__do_copy_data
__do_clear_bss
