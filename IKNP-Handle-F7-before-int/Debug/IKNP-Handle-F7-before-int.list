
IKNP-Handle-F7-before-int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004d90  08004d90  00005d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb4  08004eb4  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ebc  08004ebc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004ec4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008314  20000018  08004ed8  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000832c  08004ed8  0000632c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feac  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  00015ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000181a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009be  00000000  00000000  00018e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260be  00000000  00000000  000197fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011224  00000000  00000000  0003f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb0d0  00000000  00000000  00050ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bbb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  0013bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0013f0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d78 	.word	0x08004d78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004d78 	.word	0x08004d78

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	@ 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
 8000506:	e030      	b.n	800056a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	441a      	add	r2, r3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	440b      	add	r3, r1
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	3301      	adds	r3, #1
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	441a      	add	r2, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	3301      	adds	r3, #1
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	440b      	add	r3, r1
 8000530:	7812      	ldrb	r2, [r2, #0]
 8000532:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	3302      	adds	r3, #2
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	441a      	add	r2, r3
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	3302      	adds	r3, #2
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	440b      	add	r3, r1
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	3303      	adds	r3, #3
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	441a      	add	r2, r3
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	3303      	adds	r3, #3
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	440b      	add	r3, r1
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	3301      	adds	r3, #1
 8000568:	61fb      	str	r3, [r7, #28]
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d9cb      	bls.n	8000508 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000570:	2304      	movs	r3, #4
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	e081      	b.n	800067a <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	3b01      	subs	r3, #1
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	3301      	adds	r3, #1
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	3302      	adds	r3, #2
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	3303      	adds	r3, #3
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d125      	bne.n	8000602 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80005b6:	7b3b      	ldrb	r3, [r7, #12]
 80005b8:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80005ca:	7b3b      	ldrb	r3, [r7, #12]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <KeyExpansion+0x198>)
 80005d0:	5c9b      	ldrb	r3, [r3, r2]
 80005d2:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 80005d4:	7b7b      	ldrb	r3, [r7, #13]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <KeyExpansion+0x198>)
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <KeyExpansion+0x198>)
 80005e4:	5c9b      	ldrb	r3, [r3, r2]
 80005e6:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <KeyExpansion+0x198>)
 80005ee:	5c9b      	ldrb	r3, [r3, r2]
 80005f0:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80005f2:	7b3a      	ldrb	r2, [r7, #12]
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	089b      	lsrs	r3, r3, #2
 80005f8:	4926      	ldr	r1, [pc, #152]	@ (8000694 <KeyExpansion+0x19c>)
 80005fa:	5ccb      	ldrb	r3, [r1, r3]
 80005fc:	4053      	eors	r3, r2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	3b04      	subs	r3, #4
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	4413      	add	r3, r2
 8000616:	7819      	ldrb	r1, [r3, #0]
 8000618:	7b3a      	ldrb	r2, [r7, #12]
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	4403      	add	r3, r0
 8000620:	404a      	eors	r2, r1
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	3301      	adds	r3, #1
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	7819      	ldrb	r1, [r3, #0]
 8000630:	7b7a      	ldrb	r2, [r7, #13]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	3301      	adds	r3, #1
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	4403      	add	r3, r0
 800063a:	404a      	eors	r2, r1
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	3302      	adds	r3, #2
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	7819      	ldrb	r1, [r3, #0]
 800064a:	7bba      	ldrb	r2, [r7, #14]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	3302      	adds	r3, #2
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	4403      	add	r3, r0
 8000654:	404a      	eors	r2, r1
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	3303      	adds	r3, #3
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	7819      	ldrb	r1, [r3, #0]
 8000664:	7bfa      	ldrb	r2, [r7, #15]
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3303      	adds	r3, #3
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	4403      	add	r3, r0
 800066e:	404a      	eors	r2, r1
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3301      	adds	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b2b      	cmp	r3, #43	@ 0x2b
 800067e:	f67f af7a 	bls.w	8000576 <KeyExpansion+0x7e>
  }
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3724      	adds	r7, #36	@ 0x24
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	08004d90 	.word	0x08004d90
 8000694:	08004e90 	.word	0x08004e90

08000698 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff26 	bl	80004f8 <KeyExpansion>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80006c2:	2300      	movs	r3, #0
 80006c4:	75fb      	strb	r3, [r7, #23]
 80006c6:	e027      	b.n	8000718 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80006c8:	2300      	movs	r3, #0
 80006ca:	75bb      	strb	r3, [r7, #22]
 80006cc:	e01e      	b.n	800070c <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80006ce:	7dfa      	ldrb	r2, [r7, #23]
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	0092      	lsls	r2, r2, #2
 80006d6:	440a      	add	r2, r1
 80006d8:	4413      	add	r3, r2
 80006da:	7818      	ldrb	r0, [r3, #0]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	009a      	lsls	r2, r3, #2
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	4413      	add	r3, r2
 80006e4:	009a      	lsls	r2, r3, #2
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	4413      	add	r3, r2
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	7dfa      	ldrb	r2, [r7, #23]
 80006f4:	7dbb      	ldrb	r3, [r7, #22]
 80006f6:	4041      	eors	r1, r0
 80006f8:	b2c8      	uxtb	r0, r1
 80006fa:	68b9      	ldr	r1, [r7, #8]
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	440a      	add	r2, r1
 8000700:	4413      	add	r3, r2
 8000702:	4602      	mov	r2, r0
 8000704:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000706:	7dbb      	ldrb	r3, [r7, #22]
 8000708:	3301      	adds	r3, #1
 800070a:	75bb      	strb	r3, [r7, #22]
 800070c:	7dbb      	ldrb	r3, [r7, #22]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d9dd      	bls.n	80006ce <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	3301      	adds	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9d4      	bls.n	80006c8 <AddRoundKey+0x14>
    }
  }
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e01d      	b.n	8000776 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800073a:	2300      	movs	r3, #0
 800073c:	73bb      	strb	r3, [r7, #14]
 800073e:	e014      	b.n	800076a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000740:	7bba      	ldrb	r2, [r7, #14]
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	440a      	add	r2, r1
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	7bba      	ldrb	r2, [r7, #14]
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	490d      	ldr	r1, [pc, #52]	@ (800078c <SubBytes+0x60>)
 8000756:	5c08      	ldrb	r0, [r1, r0]
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	440a      	add	r2, r1
 800075e:	4413      	add	r3, r2
 8000760:	4602      	mov	r2, r0
 8000762:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	3301      	adds	r3, #1
 8000768:	73bb      	strb	r3, [r7, #14]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d9e7      	bls.n	8000740 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3301      	adds	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d9de      	bls.n	800073a <SubBytes+0xe>
    }
  }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	08004d90 	.word	0x08004d90

08000790 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	785b      	ldrb	r3, [r3, #1]
 800079c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795a      	ldrb	r2, [r3, #5]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a5a      	ldrb	r2, [r3, #9]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7b5a      	ldrb	r2, [r3, #13]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7a9a      	ldrb	r2, [r3, #10]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7b9a      	ldrb	r2, [r3, #14]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78db      	ldrb	r3, [r3, #3]
 80007e8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7bda      	ldrb	r2, [r3, #15]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7ada      	ldrb	r2, [r3, #11]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	79da      	ldrb	r2, [r3, #7]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	71da      	strb	r2, [r3, #7]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	b25a      	sxtb	r2, r3
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	09db      	lsrs	r3, r3, #7
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	0049      	lsls	r1, r1, #1
 800082e:	440b      	add	r3, r1
 8000830:	4619      	mov	r1, r3
 8000832:	00c8      	lsls	r0, r1, #3
 8000834:	4619      	mov	r1, r3
 8000836:	4603      	mov	r3, r0
 8000838:	440b      	add	r3, r1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	4053      	eors	r3, r2
 8000840:	b25b      	sxtb	r3, r3
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e0a4      	b.n	80009a8 <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000866:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	4053      	eors	r3, r2
 800087c:	b2da      	uxtb	r2, r3
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	4053      	eors	r3, r2
 800088a:	b2da      	uxtb	r2, r3
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	440b      	add	r3, r1
 8000894:	78db      	ldrb	r3, [r3, #3]
 8000896:	4053      	eors	r3, r2
 8000898:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800089a:	7bfa      	ldrb	r2, [r7, #15]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	4053      	eors	r3, r2
 80008ae:	733b      	strb	r3, [r7, #12]
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffae 	bl	8000814 <xtime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	733b      	strb	r3, [r7, #12]
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80008c4:	7b3a      	ldrb	r2, [r7, #12]
 80008c6:	7b7b      	ldrb	r3, [r7, #13]
 80008c8:	4053      	eors	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	404b      	eors	r3, r1
 80008d0:	b2d9      	uxtb	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	785a      	ldrb	r2, [r3, #1]
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	4053      	eors	r3, r2
 80008ee:	733b      	strb	r3, [r7, #12]
 80008f0:	7b3b      	ldrb	r3, [r7, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff8e 	bl	8000814 <xtime>
 80008f8:	4603      	mov	r3, r0
 80008fa:	733b      	strb	r3, [r7, #12]
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	7859      	ldrb	r1, [r3, #1]
 8000906:	7b3a      	ldrb	r2, [r7, #12]
 8000908:	7b7b      	ldrb	r3, [r7, #13]
 800090a:	4053      	eors	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	404a      	eors	r2, r1
 8000912:	b2d1      	uxtb	r1, r2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	460a      	mov	r2, r1
 800091c:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	789a      	ldrb	r2, [r3, #2]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	78db      	ldrb	r3, [r3, #3]
 8000932:	4053      	eors	r3, r2
 8000934:	733b      	strb	r3, [r7, #12]
 8000936:	7b3b      	ldrb	r3, [r7, #12]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff6b 	bl	8000814 <xtime>
 800093e:	4603      	mov	r3, r0
 8000940:	733b      	strb	r3, [r7, #12]
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	7899      	ldrb	r1, [r3, #2]
 800094c:	7b3a      	ldrb	r2, [r7, #12]
 800094e:	7b7b      	ldrb	r3, [r7, #13]
 8000950:	4053      	eors	r3, r2
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	404a      	eors	r2, r1
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	460a      	mov	r2, r1
 8000962:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	78da      	ldrb	r2, [r3, #3]
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	4053      	eors	r3, r2
 8000972:	733b      	strb	r3, [r7, #12]
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff4c 	bl	8000814 <xtime>
 800097c:	4603      	mov	r3, r0
 800097e:	733b      	strb	r3, [r7, #12]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	78d9      	ldrb	r1, [r3, #3]
 800098a:	7b3a      	ldrb	r2, [r7, #12]
 800098c:	7b7b      	ldrb	r3, [r7, #13]
 800098e:	4053      	eors	r3, r2
 8000990:	b2da      	uxtb	r2, r3
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	404a      	eors	r2, r1
 8000996:	b2d1      	uxtb	r1, r2
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	460a      	mov	r2, r1
 80009a0:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	3301      	adds	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	f67f af57 	bls.w	800085e <MixColumns+0xe>
  }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fe71 	bl	80006b4 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fea8 	bl	800072c <SubBytes>
    ShiftRows(state);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fed7 	bl	8000790 <ShiftRows>
    if (round == Nr) {
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b0a      	cmp	r3, #10
 80009e6:	d00c      	beq.n	8000a02 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff31 	bl	8000850 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe5d 	bl	80006b4 <AddRoundKey>
  for (round = 1; ; ++round)
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	3301      	adds	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8000a00:	e7e9      	b.n	80009d6 <Cipher+0x1c>
      break;
 8000a02:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f7ff fe53 	bl	80006b4 <AddRoundKey>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	6838      	ldr	r0, [r7, #0]
 8000a26:	f7ff ffc8 	bl	80009ba <Cipher>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a38:	f3bf 8f4f 	dsb	sy
}
 8000a3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3e:	f3bf 8f6f 	isb	sy
}
 8000a42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <SCB_EnableICache+0x48>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4c:	f3bf 8f4f 	dsb	sy
}
 8000a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a52:	f3bf 8f6f 	isb	sy
}
 8000a56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <SCB_EnableICache+0x48>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <SCB_EnableICache+0x48>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
}
 8000a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6a:	f3bf 8f6f 	isb	sy
}
 8000a6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <SCB_EnableDCache+0x84>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8e:	f3bf 8f4f 	dsb	sy
}
 8000a92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <SCB_EnableDCache+0x84>)
 8000a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	0b5b      	lsrs	r3, r3, #13
 8000aa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000aa4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	015a      	lsls	r2, r3, #5
 8000ab4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000ab8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000abe:	4911      	ldr	r1, [pc, #68]	@ (8000b04 <SCB_EnableDCache+0x84>)
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	60ba      	str	r2, [r7, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1ef      	bne.n	8000ab0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	60fa      	str	r2, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <SCB_EnableDCache+0x84>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <SCB_EnableDCache+0x84>)
 8000ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
}
 8000af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af2:	f3bf 8f6f 	isb	sy
}
 8000af6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0c4      	sub	sp, #272	@ 0x110
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b0e:	f7ff ff91 	bl	8000a34 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b12:	f7ff ffb5 	bl	8000a80 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f001 f827 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f8f7 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f000 f9d5 	bl	8000ecc <MX_GPIO_Init>
  MX_CRYP_Init();
 8000b22:	f000 f959 	bl	8000dd8 <MX_CRYP_Init>
  MX_HASH_Init();
 8000b26:	f000 f97b 	bl	8000e20 <MX_HASH_Init>
  MX_RNG_Init();
 8000b2a:	f000 f98b 	bl	8000e44 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000b2e:	f000 f99d 	bl	8000e6c <MX_USART2_UART_Init>
  //b.data.val[1] = 0;

  block_t pad[16];
  //xorBlocks_arr(&a, &a , &b, 1);

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 8000b32:	2210      	movs	r2, #16
 8000b34:	496e      	ldr	r1, [pc, #440]	@ (8000cf0 <main+0x1e8>)
 8000b36:	486f      	ldr	r0, [pc, #444]	@ (8000cf4 <main+0x1ec>)
 8000b38:	f002 fe36 	bl	80037a8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(stages == 3)
 8000b3c:	4b6e      	ldr	r3, [pc, #440]	@ (8000cf8 <main+0x1f0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	f040 80c0 	bne.w	8000cc6 <main+0x1be>
	  {
		  stages++;
 8000b46:	4b6c      	ldr	r3, [pc, #432]	@ (8000cf8 <main+0x1f0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf8 <main+0x1f0>)
 8000b4e:	6013      	str	r3, [r2, #0]
		  //HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_SET);//LOGIC 1
		  for(int i = 0; i < length; i = i + 8)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000b56:	e0af      	b.n	8000cb8 <main+0x1b0>
		  {
			  //part 1
			  if(length < (i+8))
 8000b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b5c:	1dda      	adds	r2, r3, #7
 8000b5e:	4b67      	ldr	r3, [pc, #412]	@ (8000cfc <main+0x1f4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	db4f      	blt.n	8000c06 <main+0xfe>
			  {
				  for(int j = i; j < length; ++j)
 8000b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000b6e:	e043      	b.n	8000bf8 <main+0xf0>
				  {
					  pad[2*(j-i)].data.val[0] = data[j].data.val[0];
 8000b70:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	0059      	lsls	r1, r3, #1
 8000b7c:	4a60      	ldr	r2, [pc, #384]	@ (8000d00 <main+0x1f8>)
 8000b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000b8e:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000b92:	0109      	lsls	r1, r1, #4
 8000b94:	4401      	add	r1, r0
 8000b96:	e9c1 2300 	strd	r2, r3, [r1]
					  pad[2*(j-i)].data.val[1] = data[j].data.val[1];
 8000b9a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	0059      	lsls	r1, r3, #1
 8000ba6:	4a56      	ldr	r2, [pc, #344]	@ (8000d00 <main+0x1f8>)
 8000ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	4413      	add	r3, r2
 8000bb0:	3308      	adds	r3, #8
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000bba:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000bbe:	0109      	lsls	r1, r1, #4
 8000bc0:	4401      	add	r1, r0
 8000bc2:	3108      	adds	r1, #8
 8000bc4:	e9c1 2300 	strd	r2, r3, [r1]
					  xorBlocks_arr(&pad[2*(j-i) + 1], &data[j], &delta, 1);
 8000bc8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	463a      	mov	r2, r7
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	18d0      	adds	r0, r2, r3
 8000bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <main+0x1f8>)
 8000be4:	1899      	adds	r1, r3, r2
 8000be6:	2301      	movs	r3, #1
 8000be8:	4a46      	ldr	r2, [pc, #280]	@ (8000d04 <main+0x1fc>)
 8000bea:	f000 fd0f 	bl	800160c <xorBlocks_arr>
				  for(int j = i; j < length; ++j)
 8000bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000bf8:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <main+0x1f4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbb5      	blt.n	8000b70 <main+0x68>
 8000c04:	e04f      	b.n	8000ca6 <main+0x19e>
				  }
			  }
			  else
			  {
				  for(int j = i; j < (i+8); ++j)
 8000c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c0e:	e043      	b.n	8000c98 <main+0x190>
				  {
					  pad[2*(j-i)].data.val[0] = data[j].data.val[0];
 8000c10:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	0059      	lsls	r1, r3, #1
 8000c1c:	4a38      	ldr	r2, [pc, #224]	@ (8000d00 <main+0x1f8>)
 8000c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	4413      	add	r3, r2
 8000c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000c2e:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000c32:	0109      	lsls	r1, r1, #4
 8000c34:	4401      	add	r1, r0
 8000c36:	e9c1 2300 	strd	r2, r3, [r1]
					  pad[2*(j-i)].data.val[1] = data[j].data.val[1];
 8000c3a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	0059      	lsls	r1, r3, #1
 8000c46:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <main+0x1f8>)
 8000c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	4413      	add	r3, r2
 8000c50:	3308      	adds	r3, #8
 8000c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c56:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000c5a:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000c5e:	0109      	lsls	r1, r1, #4
 8000c60:	4401      	add	r1, r0
 8000c62:	3108      	adds	r1, #8
 8000c64:	e9c1 2300 	strd	r2, r3, [r1]
					  xorBlocks_arr(&pad[2*(j-i) + 1], &data[j], &delta, 1);
 8000c68:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	3301      	adds	r3, #1
 8000c76:	463a      	mov	r2, r7
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	18d0      	adds	r0, r2, r3
 8000c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <main+0x1f8>)
 8000c84:	1899      	adds	r1, r3, r2
 8000c86:	2301      	movs	r3, #1
 8000c88:	4a1e      	ldr	r2, [pc, #120]	@ (8000d04 <main+0x1fc>)
 8000c8a:	f000 fcbf 	bl	800160c <xorBlocks_arr>
				  for(int j = i; j < (i+8); ++j)
 8000c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c92:	3301      	adds	r3, #1
 8000c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c9c:	3307      	adds	r3, #7
 8000c9e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	ddb4      	ble.n	8000c10 <main+0x108>
			  //HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_SET);//LOGIC 1
			  //for(int bingos = 0; bingos < 40; bingos++)
			  //{
				  //serve as nope
			  //}
			  mitccrh_hash(pad);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 faf9 	bl	80012a0 <mitccrh_hash>
		  for(int i = 0; i < length; i = i + 8)
 8000cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <main+0x1f4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f6ff af49 	blt.w	8000b58 <main+0x50>
			  //HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_RESET);//LOGIC 0
		  }
	  }
	  if(stages == 4)
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x1f0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	f47f af36 	bne.w	8000b3c <main+0x34>
	  {
		  stages = 0;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <main+0x1f0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		  gid = 0;
 8000cd6:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <main+0x200>)
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c1 2300 	strd	r2, r3, [r1]
		  HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	4902      	ldr	r1, [pc, #8]	@ (8000cf0 <main+0x1e8>)
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <main+0x1ec>)
 8000cea:	f002 fd5d 	bl	80037a8 <HAL_UART_Receive_IT>
	  if(stages == 3)
 8000cee:	e725      	b.n	8000b3c <main+0x34>
 8000cf0:	20000180 	.word	0x20000180
 8000cf4:	200000f8 	.word	0x200000f8
 8000cf8:	200081b0 	.word	0x200081b0
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	200081b8 	.word	0x200081b8
 8000d04:	200081c8 	.word	0x200081c8
 8000d08:	20000190 	.word	0x20000190

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	@ 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	2230      	movs	r2, #48	@ 0x30
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 ffff 	bl	8004d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <SystemClock_Config+0xc4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <SystemClock_Config+0xc4>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <SystemClock_Config+0xc4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <SystemClock_Config+0xc8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d50:	4a20      	ldr	r2, [pc, #128]	@ (8000dd4 <SystemClock_Config+0xc8>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <SystemClock_Config+0xc8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d7c:	2332      	movs	r3, #50	@ 0x32
 8000d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fb7b 	bl	8002488 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d98:	f000 fd38 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fe09 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000dc4:	f000 fd22 	bl	800180c <Error_Handler>
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3750      	adds	r7, #80	@ 0x50
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_CRYP_Init>:
  * @brief CRYP Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRYP_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END CRYP_Init 0 */

  /* USER CODE BEGIN CRYP_Init 1 */

  /* USER CODE END CRYP_Init 1 */
  hcryp.Instance = CRYP;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <MX_CRYP_Init+0x40>)
 8000de0:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyCRYP;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <MX_CRYP_Init+0x44>)
 8000df2:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000df6:	2220      	movs	r2, #32
 8000df8:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_CRYP_Init+0x3c>)
 8000e02:	f001 f82f 	bl	8001e64 <HAL_CRYP_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_CRYP_Init+0x38>
  {
    Error_Handler();
 8000e0c:	f000 fcfe 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN CRYP_Init 2 */

  /* USER CODE END CRYP_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000034 	.word	0x20000034
 8000e18:	50060000 	.word	0x50060000
 8000e1c:	20000094 	.word	0x20000094

08000e20 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_HASH_Init+0x20>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_HASH_Init+0x20>)
 8000e2c:	f001 fad8 	bl	80023e0 <HAL_HASH_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_HASH_Init+0x1a>
  {
    Error_Handler();
 8000e36:	f000 fce9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000a4 	.word	0x200000a4

08000e44 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_RNG_Init+0x20>)
 8000e4a:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <MX_RNG_Init+0x24>)
 8000e4c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_RNG_Init+0x20>)
 8000e50:	f002 fbd4 	bl	80035fc <HAL_RNG_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e5a:	f000 fcd7 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000e8 	.word	0x200000e8
 8000e68:	50060800 	.word	0x50060800

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <MX_USART2_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eb0:	f002 fbce 	bl	8003650 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eba:	f000 fca7 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000f8 	.word	0x200000f8
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b90      	ldr	r3, [pc, #576]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a8f      	ldr	r2, [pc, #572]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b8d      	ldr	r3, [pc, #564]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b8a      	ldr	r3, [pc, #552]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a89      	ldr	r2, [pc, #548]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b87      	ldr	r3, [pc, #540]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b84      	ldr	r3, [pc, #528]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a83      	ldr	r2, [pc, #524]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b81      	ldr	r3, [pc, #516]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b7b      	ldr	r3, [pc, #492]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b78      	ldr	r3, [pc, #480]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a77      	ldr	r2, [pc, #476]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b75      	ldr	r3, [pc, #468]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b72      	ldr	r3, [pc, #456]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a71      	ldr	r2, [pc, #452]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b6f      	ldr	r3, [pc, #444]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	4b6c      	ldr	r3, [pc, #432]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a6b      	ldr	r2, [pc, #428]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <MX_GPIO_Init+0x258>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f90:	4865      	ldr	r0, [pc, #404]	@ (8001128 <MX_GPIO_Init+0x25c>)
 8000f92:	f001 fa0b 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f9c:	4863      	ldr	r0, [pc, #396]	@ (800112c <MX_GPIO_Init+0x260>)
 8000f9e:	f001 fa05 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2140      	movs	r1, #64	@ 0x40
 8000fa6:	4862      	ldr	r0, [pc, #392]	@ (8001130 <MX_GPIO_Init+0x264>)
 8000fa8:	f001 fa00 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	485c      	ldr	r0, [pc, #368]	@ (8001134 <MX_GPIO_Init+0x268>)
 8000fc4:	f001 f846 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLAG_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4851      	ldr	r0, [pc, #324]	@ (8001128 <MX_GPIO_Init+0x25c>)
 8000fe2:	f001 f837 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fe6:	2332      	movs	r3, #50	@ 0x32
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	484c      	ldr	r0, [pc, #304]	@ (8001134 <MX_GPIO_Init+0x268>)
 8001002:	f001 f827 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001006:	2384      	movs	r3, #132	@ 0x84
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001016:	230b      	movs	r3, #11
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4845      	ldr	r0, [pc, #276]	@ (8001138 <MX_GPIO_Init+0x26c>)
 8001022:	f001 f817 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001026:	f244 0381 	movw	r3, #16513	@ 0x4081
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	483b      	ldr	r0, [pc, #236]	@ (800112c <MX_GPIO_Init+0x260>)
 8001040:	f001 f808 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001056:	230b      	movs	r3, #11
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4832      	ldr	r0, [pc, #200]	@ (800112c <MX_GPIO_Init+0x260>)
 8001062:	f000 fff7 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001066:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	482e      	ldr	r0, [pc, #184]	@ (800113c <MX_GPIO_Init+0x270>)
 8001084:	f000 ffe6 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001088:	2340      	movs	r3, #64	@ 0x40
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4824      	ldr	r0, [pc, #144]	@ (8001130 <MX_GPIO_Init+0x264>)
 80010a0:	f000 ffd8 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_GPIO_Init+0x264>)
 80010b8:	f000 ffcc 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010bc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ce:	230a      	movs	r3, #10
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4817      	ldr	r0, [pc, #92]	@ (8001138 <MX_GPIO_Init+0x26c>)
 80010da:	f000 ffbb 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <MX_GPIO_Init+0x26c>)
 80010f4:	f000 ffae 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800110a:	230b      	movs	r3, #11
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_GPIO_Init+0x264>)
 8001116:	f000 ff9d 	bl	8002054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	@ 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40021400 	.word	0x40021400
 800112c:	40020400 	.word	0x40020400
 8001130:	40021800 	.word	0x40021800
 8001134:	40020800 	.word	0x40020800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020c00 	.word	0x40020c00

08001140 <uint64_to_uint8_array>:
        bool_array[i] = (byte & (1 << i)) != 0;
    }
}


void uint64_to_uint8_array(uint64_t num, uint8_t arr[8]) {
 8001140:	b4f0      	push	{r4, r5, r6, r7}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 8; ++i) {
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e019      	b.n	8001186 <uint64_to_uint8_array+0x46>
        arr[i] = (num >> (8 * i)) & 0xFF; // Isolate each byte
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	00d9      	lsls	r1, r3, #3
 8001156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800115a:	f1c1 0620 	rsb	r6, r1, #32
 800115e:	f1a1 0020 	sub.w	r0, r1, #32
 8001162:	fa22 f401 	lsr.w	r4, r2, r1
 8001166:	fa03 f606 	lsl.w	r6, r3, r6
 800116a:	4334      	orrs	r4, r6
 800116c:	fa23 f000 	lsr.w	r0, r3, r0
 8001170:	4304      	orrs	r4, r0
 8001172:	fa23 f501 	lsr.w	r5, r3, r1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	b2e2      	uxtb	r2, r4
 800117e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b07      	cmp	r3, #7
 800118a:	dde2      	ble.n	8001152 <uint64_to_uint8_array+0x12>
    }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bcf0      	pop	{r4, r5, r6, r7}
 8001196:	4770      	bx	lr

08001198 <block_to_uint8_array>:

void block_to_uint8_array(block_t num, uint8_t arr[16]) {
 8001198:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	463e      	mov	r6, r7
 80011a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    for (int i = 0; i < 16; ++i) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e038      	b.n	800121e <block_to_uint8_array+0x86>
    	if (i < 8)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	dc17      	bgt.n	80011e2 <block_to_uint8_array+0x4a>
    		arr[i] = (num.data.val[1] >> (8 * i)) & 0xFF; // Isolate each byte
 80011b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b6:	6979      	ldr	r1, [r7, #20]
 80011b8:	00c9      	lsls	r1, r1, #3
 80011ba:	f1c1 0620 	rsb	r6, r1, #32
 80011be:	f1a1 0020 	sub.w	r0, r1, #32
 80011c2:	fa22 f401 	lsr.w	r4, r2, r1
 80011c6:	fa03 f606 	lsl.w	r6, r3, r6
 80011ca:	4334      	orrs	r4, r6
 80011cc:	fa23 f000 	lsr.w	r0, r3, r0
 80011d0:	4304      	orrs	r4, r0
 80011d2:	fa23 f501 	lsr.w	r5, r3, r1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011da:	4413      	add	r3, r2
 80011dc:	b2e2      	uxtb	r2, r4
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e01a      	b.n	8001218 <block_to_uint8_array+0x80>
    	else
    		arr[i] = (num.data.val[0] >> (8 * (i-8))) & 0xFF; // Isolate each byte
 80011e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e6:	6979      	ldr	r1, [r7, #20]
 80011e8:	3908      	subs	r1, #8
 80011ea:	00c9      	lsls	r1, r1, #3
 80011ec:	f1c1 0620 	rsb	r6, r1, #32
 80011f0:	f1a1 0020 	sub.w	r0, r1, #32
 80011f4:	fa22 f801 	lsr.w	r8, r2, r1
 80011f8:	fa03 f606 	lsl.w	r6, r3, r6
 80011fc:	ea48 0806 	orr.w	r8, r8, r6
 8001200:	fa23 f000 	lsr.w	r0, r3, r0
 8001204:	ea48 0800 	orr.w	r8, r8, r0
 8001208:	fa23 f901 	lsr.w	r9, r3, r1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001210:	4413      	add	r3, r2
 8001212:	fa5f f288 	uxtb.w	r2, r8
 8001216:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	ddc3      	ble.n	80011ac <block_to_uint8_array+0x14>

    }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001230:	4770      	bx	lr
	...

08001234 <mitccrh_rk>:


}

void mitccrh_rk()
{
 8001234:	b480      	push	{r7}
 8001236:	b0a3      	sub	sp, #140	@ 0x8c
 8001238:	af00      	add	r7, sp, #0
	block_t tmp[8];
	for(int i = 0; i < 8; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001240:	e01c      	b.n	800127c <mitccrh_rk+0x48>
		//tmp[i].data.val[1] = gid++;
		//tmp[i].data.val[0] = 0;
		//xorBlocks_arr(&keysForAes[i], &tmp[i], &S, 1);

		//FOR TEST.
		keysForAes[i].data.val[0] = 0;
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <mitccrh_rk+0x64>)
 8001244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c1 2300 	strd	r2, r3, [r1]
		keysForAes[i].data.val[1] = 0;
 8001258:	4a0f      	ldr	r2, [pc, #60]	@ (8001298 <mitccrh_rk+0x64>)
 800125a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	f103 0108 	add.w	r1, r3, #8
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 8; i++)
 8001272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001276:	3301      	adds	r3, #1
 8001278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800127c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001280:	2b07      	cmp	r3, #7
 8001282:	ddde      	ble.n	8001242 <mitccrh_rk+0xe>
	}
	keys_used = 0;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <mitccrh_rk+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
	//keysForAes[0].data.val[0] = 305419896; //aaaaaaaa
	//keysForAes[0].data.val[1] = 0;
	//keysForAes[0].data.val[1] = 0; //low (in memory first 64 bits)
	//keysForAes[0].data.val[0] = 0; // high (in memory last 64 bits)

}
 800128a:	bf00      	nop
 800128c:	378c      	adds	r7, #140	@ 0x8c
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200081e8 	.word	0x200081e8
 800129c:	20000000 	.word	0x20000000

080012a0 <mitccrh_hash>:

void mitccrh_hash(block_t * blks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0d4      	sub	sp, #336	@ 0x150
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80012aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80012ae:	6018      	str	r0, [r3, #0]
	if(keys_used == 8)
 80012b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001538 <mitccrh_hash+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d101      	bne.n	80012bc <mitccrh_hash+0x1c>
	{
		mitccrh_rk();
 80012b8:	f7ff ffbc 	bl	8001234 <mitccrh_rk>
	}

	block_t tmp[16];
	for(int i = 0; i < 16; ++i)
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80012c2:	e02f      	b.n	8001324 <mitccrh_hash+0x84>
	{
		tmp[i].data.val[0] = blks[i].data.val[0];
 80012c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80012ce:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80012de:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 80012e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80012e6:	0109      	lsls	r1, r1, #4
 80012e8:	4401      	add	r1, r0
 80012ea:	e9c1 2300 	strd	r2, r3, [r1]
		tmp[i].data.val[1] = blks[i].data.val[1];
 80012ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80012f8:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001304:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001308:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 800130c:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001310:	0109      	lsls	r1, r1, #4
 8001312:	4401      	add	r1, r0
 8001314:	3108      	adds	r1, #8
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 16; ++i)
 800131a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001324:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001328:	2b0f      	cmp	r3, #15
 800132a:	ddcb      	ble.n	80012c4 <mitccrh_hash+0x24>
	//tmp[0].data.val[1] = 0;
	//MY PART OF THE NEW ALGO.
	uint8_t buffer[16];
	uint32_t buffer_32t[4];
	//ALL OF THIS IS ParaEnc()
	for(int g = 0; g < 16; g = g + 2) //maybe needed to make g + 2, i have run over g+1 every time. TODO:
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001332:	e0c9      	b.n	80014c8 <mitccrh_hash+0x228>
	{
		if (HAL_CRYP_DeInit(&hcryp) != HAL_OK)
 8001334:	4881      	ldr	r0, [pc, #516]	@ (800153c <mitccrh_hash+0x29c>)
 8001336:	f000 fdcd 	bl	8001ed4 <HAL_CRYP_DeInit>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <mitccrh_hash+0xa4>
		{
			// Handle error
			while(1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <mitccrh_hash+0xa0>
			{

			}
		}
		uint8_t array_for_key[16];
		block_to_uint8_array(keysForAes[g], array_for_key);
 8001344:	4a7e      	ldr	r2, [pc, #504]	@ (8001540 <mitccrh_hash+0x2a0>)
 8001346:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	f107 0208 	add.w	r2, r7, #8
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001356:	f7ff ff1f 	bl	8001198 <block_to_uint8_array>


		// Step 2: Update the key by converting the 64-bit parts to 32-bit parts
		pKeyCRYP[3] = (uint32_t)(keysForAes[g].data.val[0] >> 32);
 800135a:	4a79      	ldr	r2, [pc, #484]	@ (8001540 <mitccrh_hash+0x2a0>)
 800135c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	000a      	movs	r2, r1
 8001372:	2300      	movs	r3, #0
 8001374:	4b73      	ldr	r3, [pc, #460]	@ (8001544 <mitccrh_hash+0x2a4>)
 8001376:	60da      	str	r2, [r3, #12]
		//pKeyCRYP[3] = (uint32_t)(keysForAes[g].data.val[0] & 0xFFFFFFFF);
		pKeyCRYP[2] = (uint32_t)(keysForAes[g].data.val[0] & 0xFFFFFFFF);
 8001378:	4a71      	ldr	r2, [pc, #452]	@ (8001540 <mitccrh_hash+0x2a0>)
 800137a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <mitccrh_hash+0x2a4>)
 8001388:	609a      	str	r2, [r3, #8]
		//pKeyCRYP[2] = (uint32_t)(keysForAes[g].data.val[0] >> 32);
		pKeyCRYP[1] = (uint32_t)(keysForAes[g].data.val[1] >> 32);
 800138a:	4a6d      	ldr	r2, [pc, #436]	@ (8001540 <mitccrh_hash+0x2a0>)
 800138c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	3308      	adds	r3, #8
 8001396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	000a      	movs	r2, r1
 80013a4:	2300      	movs	r3, #0
 80013a6:	4b67      	ldr	r3, [pc, #412]	@ (8001544 <mitccrh_hash+0x2a4>)
 80013a8:	605a      	str	r2, [r3, #4]
		//pKeyCRYP[1] = (uint32_t)(keysForAes[g].data.val[1] & 0xFFFFFFFF);
		pKeyCRYP[0] = (uint32_t)(keysForAes[g].data.val[1] & 0xFFFFFFFF);
 80013aa:	4a65      	ldr	r2, [pc, #404]	@ (8001540 <mitccrh_hash+0x2a0>)
 80013ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	3308      	adds	r3, #8
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	4b62      	ldr	r3, [pc, #392]	@ (8001544 <mitccrh_hash+0x2a4>)
 80013bc:	601a      	str	r2, [r3, #0]
		//pKeyCRYP[0] = (uint32_t)(keysForAes[g].data.val[1] >> 32);

		// Step 3: Reinitialize the CRYP module with the new key
		if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80013be:	485f      	ldr	r0, [pc, #380]	@ (800153c <mitccrh_hash+0x29c>)
 80013c0:	f000 fd50 	bl	8001e64 <HAL_CRYP_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <mitccrh_hash+0x12e>
		{
		// Handle error
			while(1)
 80013ca:	bf00      	nop
 80013cc:	e7fd      	b.n	80013ca <mitccrh_hash+0x12a>

			}
		}
		//Step 4: encrypt tmp[g] and tmp[g+1] with the same key.

		uint64_to_uint8_array(tmp[g].data.val[0], buffer);
 80013ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80013d2:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80013d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e6:	461a      	mov	r2, r3
 80013e8:	f7ff feaa 	bl	8001140 <uint64_to_uint8_array>
		uint64_to_uint8_array(tmp[g].data.val[1], buffer+8);
 80013ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80013f0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80013f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	3308      	adds	r3, #8
 80013fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	3308      	adds	r3, #8
 8001408:	461a      	mov	r2, r3
 800140a:	f7ff fe99 	bl	8001140 <uint64_to_uint8_array>
		if(g == 0)
 800140e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001412:	2b00      	cmp	r3, #0
 8001414:	d133      	bne.n	800147e <mitccrh_hash+0x1de>
							  //serve as nope
			//}
			//TODO: DO NOT LEAVE IT LIKE THIS! THIS IS ONLY A CHECK!
			// WHAT WE NEED TO DO IS TO JUST CHECK IF IT WORKS AND MAKE
			// SURE THIS IS THE KEY WE NEED!
			for (int i = 0; i < 16; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800141c:	e00d      	b.n	800143a <mitccrh_hash+0x19a>
			{
				array_for_key[i] = 0;
 800141e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001422:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8001426:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 16; i++)
 8001430:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001434:	3301      	adds	r3, #1
 8001436:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800143a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800143e:	2b0f      	cmp	r3, #15
 8001440:	dded      	ble.n	800141e <mitccrh_hash+0x17e>
			}
			array_for_key[15] = 170;
 8001442:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001446:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800144a:	22aa      	movs	r2, #170	@ 0xaa
 800144c:	73da      	strb	r2, [r3, #15]
			AES_init_ctx(&ctx, array_for_key);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	483c      	ldr	r0, [pc, #240]	@ (8001548 <mitccrh_hash+0x2a8>)
 8001456:	f7ff f91f 	bl	8000698 <AES_init_ctx>
			HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_SET);//LOGIC 1
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001460:	483a      	ldr	r0, [pc, #232]	@ (800154c <mitccrh_hash+0x2ac>)
 8001462:	f000 ffa3 	bl	80023ac <HAL_GPIO_WritePin>

			//for(int bingos = 0; bingos < 400; bingos++)
			//{
							  //serve as nope
			//}
			AES_ECB_encrypt(&ctx, buffer);
 8001466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146a:	4619      	mov	r1, r3
 800146c:	4836      	ldr	r0, [pc, #216]	@ (8001548 <mitccrh_hash+0x2a8>)
 800146e:	f7ff fad2 	bl	8000a16 <AES_ECB_encrypt>
			//HAL_CRYP_Encrypt(&hcryp, buffer_32t, 16 , cipher, 600);
			HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_RESET);//LOGIC 0
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001478:	4834      	ldr	r0, [pc, #208]	@ (800154c <mitccrh_hash+0x2ac>)
 800147a:	f000 ff97 	bl	80023ac <HAL_GPIO_WritePin>
				//serve as nope
			//}
			//HAL_GPIO_WritePin(FLAG_GPIO_Port, FLAG_Pin, GPIO_PIN_RESET);//LOGIC 0
		}
		//HAL_CRYP_Encrypt(&hcryp, buffer_32t, 16 , cipher, 100);
		tmp[g].data.val[0] = uint32_array_to_uint64(cipher);
 800147e:	4834      	ldr	r0, [pc, #208]	@ (8001550 <mitccrh_hash+0x2b0>)
 8001480:	f000 f88a 	bl	8001598 <uint32_array_to_uint64>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800148c:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 8001490:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001494:	0109      	lsls	r1, r1, #4
 8001496:	4401      	add	r1, r0
 8001498:	e9c1 2300 	strd	r2, r3, [r1]
		tmp[g].data.val[1] = uint32_array_to_uint64(cipher+2);
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <mitccrh_hash+0x2b4>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f87a 	bl	8001598 <uint32_array_to_uint64>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80014ac:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 80014b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80014b4:	0109      	lsls	r1, r1, #4
 80014b6:	4401      	add	r1, r0
 80014b8:	3108      	adds	r1, #8
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
	for(int g = 0; g < 16; g = g + 2) //maybe needed to make g + 2, i have run over g+1 every time. TODO:
 80014be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c2:	3302      	adds	r3, #2
 80014c4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80014c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	f77f af31 	ble.w	8001334 <mitccrh_hash+0x94>
		//tmp[g+1].data = pack_128_bits_into_int64x2_t(ciphertext);
		 *
		 */
	}

	keys_used += 8;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <mitccrh_hash+0x298>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3308      	adds	r3, #8
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <mitccrh_hash+0x298>)
 80014da:	6013      	str	r3, [r2, #0]

	//and now -> the end! xor of blks and tmp.
	for(int i = 0;i < 16; ++i)
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80014e2:	e01f      	b.n	8001524 <mitccrh_hash+0x284>
	{
		xorBlocks_arr(&blks[i], &blks[i], &tmp[i], 1);
 80014e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80014ee:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	18d0      	adds	r0, r2, r3
 80014f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001500:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	18d1      	adds	r1, r2, r3
 8001508:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800150c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	441a      	add	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	f000 f879 	bl	800160c <xorBlocks_arr>
	for(int i = 0;i < 16; ++i)
 800151a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001524:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001528:	2b0f      	cmp	r3, #15
 800152a:	dddb      	ble.n	80014e4 <mitccrh_hash+0x244>
	}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	20000034 	.word	0x20000034
 8001540:	200081e8 	.word	0x200081e8
 8001544:	20000094 	.word	0x20000094
 8001548:	20008268 	.word	0x20008268
 800154c:	40021400 	.word	0x40021400
 8001550:	20000198 	.word	0x20000198
 8001554:	200001a0 	.word	0x200001a0

08001558 <reverse_bytes>:

uint64_t reverse_bytes(uint32_t val) {
 8001558:	b4b0      	push	{r4, r5, r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    val = ((val & 0xFF000000) >> 24) |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0e1a      	lsrs	r2, r3, #24
          ((val & 0x00FF0000) >> 8)  |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    val = ((val & 0xFF000000) >> 24) |
 800156c:	431a      	orrs	r2, r3
          ((val & 0x0000FF00) << 8)  |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
          ((val & 0x00FF0000) >> 8)  |
 8001576:	431a      	orrs	r2, r3
          ((val & 0x000000FF) << 24);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	061b      	lsls	r3, r3, #24
    val = ((val & 0xFF000000) >> 24) |
 800157c:	4313      	orrs	r3, r2
 800157e:	607b      	str	r3, [r7, #4]
    return val;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	461c      	mov	r4, r3
 8001586:	4615      	mov	r5, r2
 8001588:	4622      	mov	r2, r4
 800158a:	462b      	mov	r3, r5
}
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bcb0      	pop	{r4, r5, r7}
 8001596:	4770      	bx	lr

08001598 <uint32_array_to_uint64>:
    for (int i = 0; i < 2; ++i) {
        arr[i] = (num >> (32 * i)) & 0xFFFFFFFF; // Isolate each 32-bit segment
    }
}

uint64_t uint32_array_to_uint64(uint32_t arr[2]) {
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	uint64_t num = 0;
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t high = reverse_bytes(arr[1]); // Reverse bytes of arr[1] to place it in the high bits
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffcf 	bl	8001558 <reverse_bytes>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4613      	mov	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
	uint32_t low = reverse_bytes(arr[0]);  // Reverse bytes of arr[0] to place it in the low bits
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ffc6 	bl	8001558 <reverse_bytes>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4613      	mov	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
	num = ((uint64_t)high << 32) | low;    // Combine the reversed parts correctly
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	469a      	mov	sl, r3
 80015da:	4693      	mov	fp, r2
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	4653      	mov	r3, sl
 80015e6:	2200      	movs	r2, #0
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	2000      	movs	r0, #0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4605      	mov	r5, r0
 80015f0:	ea42 0804 	orr.w	r8, r2, r4
 80015f4:	ea43 0905 	orr.w	r9, r3, r5
 80015f8:	e9c7 8904 	strd	r8, r9, [r7, #16]
	return num;
 80015fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800160c <xorBlocks_arr>:


	return temp;
}

void xorBlocks_arr(block_t* res, const block_t* x, const block_t* y, int nblocks) {
 800160c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	603b      	str	r3, [r7, #0]
	const block_t* dest = nblocks + x;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
	for (; x != dest;) {
 8001626:	e022      	b.n	800166e <xorBlocks_arr+0x62>
		res->data.val[0] = x->data.val[0] ^ y->data.val[0];
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	ea80 0402 	eor.w	r4, r0, r2
 8001638:	ea81 0503 	eor.w	r5, r1, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	e9c3 4500 	strd	r4, r5, [r3]
		res->data.val[1] = x->data.val[1] ^ y->data.val[1];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800164e:	ea80 0802 	eor.w	r8, r0, r2
 8001652:	ea81 0903 	eor.w	r9, r1, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	e9c3 8902 	strd	r8, r9, [r3, #8]
		res++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3310      	adds	r3, #16
 8001660:	60fb      	str	r3, [r7, #12]
		x++;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3310      	adds	r3, #16
 8001666:	60bb      	str	r3, [r7, #8]
		y++;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3310      	adds	r3, #16
 800166c:	607b      	str	r3, [r7, #4]
	for (; x != dest;) {
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	429a      	cmp	r2, r3
 8001674:	d1d8      	bne.n	8001628 <xorBlocks_arr+0x1c>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001682:	4770      	bx	lr

08001684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_UART_RxCpltCallback+0xf8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d16d      	bne.n	8001774 <HAL_UART_RxCpltCallback+0xf0>
	{
		if(stages == 0) //delta
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d119      	bne.n	80016d4 <HAL_UART_RxCpltCallback+0x50>
		{
			delta.data.val[0]= receivedBlock.data.val[0];
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	4938      	ldr	r1, [pc, #224]	@ (8001788 <HAL_UART_RxCpltCallback+0x104>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
			delta.data.val[1] = receivedBlock.data.val[1];
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016b2:	4935      	ldr	r1, [pc, #212]	@ (8001788 <HAL_UART_RxCpltCallback+0x104>)
 80016b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			counter = 0;
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
			stages++;
 80016be:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 80016c6:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 80016c8:	2210      	movs	r2, #16
 80016ca:	492e      	ldr	r1, [pc, #184]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016cc:	482b      	ldr	r0, [pc, #172]	@ (800177c <HAL_UART_RxCpltCallback+0xf8>)
 80016ce:	f002 f86b 	bl	80037a8 <HAL_UART_Receive_IT>
		*/

	}


}
 80016d2:	e04f      	b.n	8001774 <HAL_UART_RxCpltCallback+0xf0>
		else if(stages == 1) //S
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d119      	bne.n	8001710 <HAL_UART_RxCpltCallback+0x8c>
			S.data.val[0]= receivedBlock.data.val[0];
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	492b      	ldr	r1, [pc, #172]	@ (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 80016e4:	e9c1 2300 	strd	r2, r3, [r1]
			S.data.val[1] = receivedBlock.data.val[1];
 80016e8:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ee:	4928      	ldr	r1, [pc, #160]	@ (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 80016f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			counter = 0;
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
			stages++;
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a1f      	ldr	r2, [pc, #124]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 8001702:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 8001704:	2210      	movs	r2, #16
 8001706:	491f      	ldr	r1, [pc, #124]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 8001708:	481c      	ldr	r0, [pc, #112]	@ (800177c <HAL_UART_RxCpltCallback+0xf8>)
 800170a:	f002 f84d 	bl	80037a8 <HAL_UART_Receive_IT>
}
 800170e:	e031      	b.n	8001774 <HAL_UART_RxCpltCallback+0xf0>
		else if(stages == 2) //DATA
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d12d      	bne.n	8001774 <HAL_UART_RxCpltCallback+0xf0>
			data[counter].data.val[0] = receivedBlock.data.val[0];
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	481c      	ldr	r0, [pc, #112]	@ (8001794 <HAL_UART_RxCpltCallback+0x110>)
 8001724:	0109      	lsls	r1, r1, #4
 8001726:	4401      	add	r1, r0
 8001728:	e9c1 2300 	strd	r2, r3, [r1]
			data[counter].data.val[1] = receivedBlock.data.val[1];
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 8001732:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001736:	4817      	ldr	r0, [pc, #92]	@ (8001794 <HAL_UART_RxCpltCallback+0x110>)
 8001738:	0109      	lsls	r1, r1, #4
 800173a:	4401      	add	r1, r0
 800173c:	3108      	adds	r1, #8
 800173e:	e9c1 2300 	strd	r2, r3, [r1]
			counter++;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 800174a:	6013      	str	r3, [r2, #0]
			if(counter == length)
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_RxCpltCallback+0x114>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d108      	bne.n	800176a <HAL_UART_RxCpltCallback+0xe6>
				counter = 0;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_UART_RxCpltCallback+0x108>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
				stages++;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_UART_RxCpltCallback+0xfc>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	e004      	b.n	8001774 <HAL_UART_RxCpltCallback+0xf0>
				HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 800176a:	2210      	movs	r2, #16
 800176c:	4905      	ldr	r1, [pc, #20]	@ (8001784 <HAL_UART_RxCpltCallback+0x100>)
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <HAL_UART_RxCpltCallback+0xf8>)
 8001770:	f002 f81a 	bl	80037a8 <HAL_UART_Receive_IT>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200000f8 	.word	0x200000f8
 8001780:	200081b0 	.word	0x200081b0
 8001784:	20000180 	.word	0x20000180
 8001788:	200081c8 	.word	0x200081c8
 800178c:	200001a8 	.word	0x200001a8
 8001790:	200081d8 	.word	0x200081d8
 8001794:	200081b8 	.word	0x200081b8
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	counter_for_sending_data++;
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <HAL_UART_TxCpltCallback+0x58>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <HAL_UART_TxCpltCallback+0x58>)
 80017ac:	6013      	str	r3, [r2, #0]
	if(counter_for_sending_data < 2048)
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_UART_TxCpltCallback+0x58>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017b6:	da0a      	bge.n	80017ce <HAL_UART_TxCpltCallback+0x32>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)&t[counter_for_sending_data], sizeof(receivedBlock));
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_UART_TxCpltCallback+0x58>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <HAL_UART_TxCpltCallback+0x5c>)
 80017c0:	4413      	add	r3, r2
 80017c2:	2210      	movs	r2, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <HAL_UART_TxCpltCallback+0x60>)
 80017c8:	f001 ff90 	bl	80036ec <HAL_UART_Transmit_IT>
		counter_for_sending_data = 0;
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
	}


}
 80017cc:	e00d      	b.n	80017ea <HAL_UART_TxCpltCallback+0x4e>
		stages = 0;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_UART_TxCpltCallback+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
		counter = 0;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_UART_TxCpltCallback+0x68>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		counter_for_sending_data = 0;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_UART_TxCpltCallback+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&receivedBlock, sizeof(receivedBlock));
 80017e0:	2210      	movs	r2, #16
 80017e2:	4909      	ldr	r1, [pc, #36]	@ (8001808 <HAL_UART_TxCpltCallback+0x6c>)
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <HAL_UART_TxCpltCallback+0x60>)
 80017e6:	f001 ffdf 	bl	80037a8 <HAL_UART_Receive_IT>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200081b4 	.word	0x200081b4
 80017f8:	200001b0 	.word	0x200001b0
 80017fc:	200000f8 	.word	0x200000f8
 8001800:	200081b0 	.word	0x200081b0
 8001804:	200001a8 	.word	0x200001a8
 8001808:	20000180 	.word	0x20000180

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_MspInit+0x44>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <HAL_MspInit+0x44>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_MspInit+0x44>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_MspInit+0x44>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x44>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x44>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==CRYP)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_CRYP_MspInit+0x38>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_CRYP_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRYP_MspInit 0 */

  /* USER CODE END CRYP_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRYP_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_CRYP_MspInit+0x3c>)
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <HAL_CRYP_MspInit+0x3c>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	6353      	str	r3, [r2, #52]	@ 0x34
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_CRYP_MspInit+0x3c>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRYP_MspInit 1 */

  /* USER CODE END CRYP_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	50060000 	.word	0x50060000
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_CRYP_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==CRYP)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_CRYP_MspDeInit+0x2c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d105      	bne.n	80018be <HAL_CRYP_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRYP_MspDeInit 0 */

  /* USER CODE END CRYP_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRYP_CLK_DISABLE();
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <HAL_CRYP_MspDeInit+0x30>)
 80018b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b6:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <HAL_CRYP_MspDeInit+0x30>)
 80018b8:	f023 0310 	bic.w	r3, r3, #16
 80018bc:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN CRYP_MspDeInit 1 */

  /* USER CODE END CRYP_MspDeInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	50060000 	.word	0x50060000
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_HASH_MspInit+0x2c>)
 80018de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_HASH_MspInit+0x2c>)
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_HASH_MspInit+0x2c>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0a4      	sub	sp, #144	@ 0x90
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2284      	movs	r2, #132	@ 0x84
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fa02 	bl	8004d1e <memset>
  if(hrng->Instance==RNG)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <HAL_RNG_MspInit+0x60>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d11b      	bne.n	800195c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001924:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001928:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4618      	mov	r0, r3
 8001936:	f001 fa71 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001940:	f7ff ff64 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_RNG_MspInit+0x64>)
 8001946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_RNG_MspInit+0x64>)
 800194a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800194e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RNG_MspInit+0x64>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3790      	adds	r7, #144	@ 0x90
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	50060800 	.word	0x50060800
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0ac      	sub	sp, #176	@ 0xb0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	2284      	movs	r2, #132	@ 0x84
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f9c6 	bl	8004d1e <memset>
  if(huart->Instance==USART2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a35      	ldr	r2, [pc, #212]	@ (8001a6c <HAL_UART_MspInit+0x100>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d163      	bne.n	8001a64 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80019a0:	2308      	movs	r3, #8
 80019a2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fa37 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b4:	f7ff ff2a 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	4a26      	ldr	r2, [pc, #152]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6313      	str	r3, [r2, #48]	@ 0x30
 80019dc:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e8:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	4a20      	ldr	r2, [pc, #128]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_UART_MspInit+0x104>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a00:	2308      	movs	r3, #8
 8001a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a22:	4619      	mov	r1, r3
 8001a24:	4813      	ldr	r0, [pc, #76]	@ (8001a74 <HAL_UART_MspInit+0x108>)
 8001a26:	f000 fb15 	bl	8002054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480a      	ldr	r0, [pc, #40]	@ (8001a78 <HAL_UART_MspInit+0x10c>)
 8001a50:	f000 fb00 	bl	8002054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2026      	movs	r0, #38	@ 0x26
 8001a5a:	f000 f9cc 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a5e:	2026      	movs	r0, #38	@ 0x26
 8001a60:	f000 f9e5 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	37b0      	adds	r7, #176	@ 0xb0
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <NMI_Handler+0x4>

08001a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <HardFault_Handler+0x4>

08001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <MemManage_Handler+0x4>

08001a94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad2:	f000 f895 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <USART2_IRQHandler+0x10>)
 8001ae2:	f001 fea5 	bl	8003830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200000f8 	.word	0x200000f8

08001af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	@ (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ffd7 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f003 f8f5 	bl	8004d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7fe ffdf 	bl	8000b08 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b58:	08004ec4 	.word	0x08004ec4
  ldr r2, =_sbss
 8001b5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001b60:	2000832c 	.word	0x2000832c

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_Init+0x34>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_Init+0x34>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x34>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x34>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f92b 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fe42 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f943 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bdc:	f000 f90b 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000010 	.word	0x20000010
 8001c24:	20008328 	.word	0x20008328

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20008328 	.word	0x20008328

08001c40 <__NVIC_SetPriorityGrouping>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	05fa0000 	.word	0x05fa0000

08001c88 <__NVIC_GetPriorityGrouping>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_CRYP_Init>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e028      	b.n	8001ec8 <HAL_CRYP_Init+0x64>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fce8 	bl	8001860 <HAL_CRYP_MspInit>
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size(This bit field is don't care in the DES or TDES modes) data type and Algorithm */
#if defined (CRYP)

  MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <HAL_CRYP_Init+0x6c>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6851      	ldr	r1, [r2, #4]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6892      	ldr	r2, [r2, #8]
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6952      	ldr	r2, [r2, #20]
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	6013      	str	r3, [r2, #0]
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);

#endif  /* End AES or CRYP*/

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	fff7fc07 	.word	0xfff7fc07

08001ed4 <HAL_CRYP_DeInit>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e020      	b.n	8001f28 <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hcryp->CrypOutCount = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  hcryp->CrypHeaderCount = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fcc5 	bl	80018a0 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3e:	f7ff fe73 	bl	8001c28 <HAL_GetTick>
 8001f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e052      	b.n	8002008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0216 	bic.w	r2, r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_DMA_Abort+0x62>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	e013      	b.n	8001fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb4:	f7ff fe38 	bl	8001c28 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d90c      	bls.n	8001fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e015      	b.n	8002008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e4      	bne.n	8001fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	223f      	movs	r2, #63	@ 0x3f
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2280      	movs	r2, #128	@ 0x80
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00c      	b.n	8002048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e175      	b.n	8002360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8164 	bne.w	800235a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x56>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80be 	beq.w	800235a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_GPIO_Init+0x324>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_GPIO_Init+0x324>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b63      	ldr	r3, [pc, #396]	@ (8002378 <HAL_GPIO_Init+0x324>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021f6:	4a61      	ldr	r2, [pc, #388]	@ (800237c <HAL_GPIO_Init+0x328>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a58      	ldr	r2, [pc, #352]	@ (8002380 <HAL_GPIO_Init+0x32c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d037      	beq.n	8002292 <HAL_GPIO_Init+0x23e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a57      	ldr	r2, [pc, #348]	@ (8002384 <HAL_GPIO_Init+0x330>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_GPIO_Init+0x23a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a56      	ldr	r2, [pc, #344]	@ (8002388 <HAL_GPIO_Init+0x334>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x236>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a55      	ldr	r2, [pc, #340]	@ (800238c <HAL_GPIO_Init+0x338>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x232>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a54      	ldr	r2, [pc, #336]	@ (8002390 <HAL_GPIO_Init+0x33c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x22e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a53      	ldr	r2, [pc, #332]	@ (8002394 <HAL_GPIO_Init+0x340>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x22a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	@ (8002398 <HAL_GPIO_Init+0x344>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a51      	ldr	r2, [pc, #324]	@ (800239c <HAL_GPIO_Init+0x348>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a50      	ldr	r2, [pc, #320]	@ (80023a0 <HAL_GPIO_Init+0x34c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	@ (80023a4 <HAL_GPIO_Init+0x350>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x21a>
 800226a:	2309      	movs	r3, #9
 800226c:	e012      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800226e:	230a      	movs	r3, #10
 8002270:	e010      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002272:	2308      	movs	r3, #8
 8002274:	e00e      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002276:	2307      	movs	r3, #7
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800227a:	2306      	movs	r3, #6
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	@ (800237c <HAL_GPIO_Init+0x328>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <HAL_GPIO_Init+0x354>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f ae86 	bls.w	8002074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40021800 	.word	0x40021800
 800239c:	40021c00 	.word	0x40021c00
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40022400 	.word	0x40022400
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e043      	b.n	800247a <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fa64 	bl	80018d4 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
  hhash->NbWordsAlreadyPushed = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8002444:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <HAL_HASH_Init+0xa4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <HAL_HASH_Init+0xa4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_HASH_Init+0xa4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_HASH_Init+0xa4>)
 800245c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002460:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	50060400 	.word	0x50060400

08002488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e291      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b96      	ldr	r3, [pc, #600]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b8:	4b93      	ldr	r3, [pc, #588]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
 80024c4:	4b90      	ldr	r3, [pc, #576]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x130>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e26b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x7a>
 80024f4:	4b84      	ldr	r3, [pc, #528]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a83      	ldr	r2, [pc, #524]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x9c>
 800250a:	4b7f      	ldr	r3, [pc, #508]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7e      	ldr	r2, [pc, #504]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7b      	ldr	r2, [pc, #492]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xc0>
 800252e:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a72      	ldr	r2, [pc, #456]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002548:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6b      	ldr	r2, [pc, #428]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff fb5e 	bl	8001c28 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff fb5a 	bl	8001c28 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	@ 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e21f      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b61      	ldr	r3, [pc, #388]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe8>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff fb4a 	bl	8001c28 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fb46 	bl	8001c28 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e20b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x110>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
 80025de:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1df      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	493d      	ldr	r1, [pc, #244]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e040      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff fafc 	bl	8001c28 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7ff faf8 	bl	8001c28 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1bd      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b30      	ldr	r3, [pc, #192]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4929      	ldr	r1, [pc, #164]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a26      	ldr	r2, [pc, #152]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff fad8 	bl	8001c28 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff fad4 	bl	8001c28 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e199      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d038      	beq.n	8002718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7ff fab5 	bl	8001c28 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff fab1 	bl	8001c28 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e176      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x23a>
 80026e0:	e01a      	b.n	8002718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff fa9b 	bl	8001c28 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7ff fa97 	bl	8001c28 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d903      	bls.n	800270c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e15c      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
 8002708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b91      	ldr	r3, [pc, #580]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a4 	beq.w	800286e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b8b      	ldr	r3, [pc, #556]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a87      	ldr	r2, [pc, #540]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274e:	4b82      	ldr	r3, [pc, #520]	@ (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800275a:	4b7f      	ldr	r3, [pc, #508]	@ (8002958 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7e      	ldr	r2, [pc, #504]	@ (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7ff fa5f 	bl	8001c28 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7ff fa5b 	bl	8001c28 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	@ 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e120      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b75      	ldr	r3, [pc, #468]	@ (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x31a>
 8002794:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x33c>
 80027aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	4a69      	ldr	r2, [pc, #420]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b6:	4b67      	ldr	r3, [pc, #412]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	4a66      	ldr	r2, [pc, #408]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x35e>
 80027cc:	4b61      	ldr	r3, [pc, #388]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a60      	ldr	r2, [pc, #384]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f2:	4b58      	ldr	r3, [pc, #352]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	4a57      	ldr	r2, [pc, #348]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7ff fa0f 	bl	8001c28 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7ff fa0b 	bl	8001c28 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ce      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x386>
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f9f9 	bl	8001c28 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff f9f5 	bl	8001c28 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b3c      	ldr	r3, [pc, #240]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	4a3b      	ldr	r2, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80a4 	beq.w	80029c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d06b      	beq.n	800295c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d149      	bne.n	8002920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f9c6 	bl	8001c28 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f9c2 	bl	8001c28 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f996 	bl	8001c28 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff f992 	bl	8001c28 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e057      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x478>
 800291e:	e04f      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f97c 	bl	8001c28 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f978 	bl	8001c28 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e03d      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x4ac>
 8002952:	e035      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x544>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4965      	ldr	r1, [pc, #404]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a58      	ldr	r2, [pc, #352]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f8b0 	bl	8001c28 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7ff f8ac 	bl	8001c28 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	@ (8002b9c <HAL_RCC_ClockConfig+0x1cc>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f80c 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08004e9c 	.word	0x08004e9c
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b094      	sub	sp, #80	@ 0x50
 8002bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc0:	4b79      	ldr	r3, [pc, #484]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	f200 80e1 	bhi.w	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e0db      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b73      	ldr	r3, [pc, #460]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be0:	e0db      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b73      	ldr	r3, [pc, #460]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be6:	e0d8      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b6f      	ldr	r3, [pc, #444]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	2200      	movs	r2, #0
 8002c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	6139      	str	r1, [r7, #16]
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4651      	mov	r1, sl
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4651      	mov	r1, sl
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c60:	4659      	mov	r1, fp
 8002c62:	eb63 0901 	sbc.w	r9, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c7a:	4690      	mov	r8, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb18 0303 	adds.w	r3, r8, r3
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb49 0303 	adc.w	r3, r9, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	024b      	lsls	r3, r1, #9
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	024a      	lsls	r2, r1, #9
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cb8:	f7fd faa6 	bl	8000208 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc4:	e058      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc6:	4b38      	ldr	r3, [pc, #224]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cfe:	4649      	mov	r1, r9
 8002d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d18:	ebb2 040a 	subs.w	r4, r2, sl
 8002d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	00eb      	lsls	r3, r5, #3
 8002d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	eb45 0303 	adc.w	r3, r5, r3
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d4e:	4629      	mov	r1, r5
 8002d50:	028b      	lsls	r3, r1, #10
 8002d52:	4621      	mov	r1, r4
 8002d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d58:	4621      	mov	r1, r4
 8002d5a:	028a      	lsls	r2, r1, #10
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d62:	2200      	movs	r2, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	61fa      	str	r2, [r7, #28]
 8002d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6c:	f7fd fa4c 	bl	8000208 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3750      	adds	r7, #80	@ 0x50
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08004eac 	.word	0x08004eac

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08004eac 	.word	0x08004eac

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e44:	4b69      	ldr	r3, [pc, #420]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a68      	ldr	r2, [pc, #416]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	4b66      	ldr	r3, [pc, #408]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	4964      	ldr	r1, [pc, #400]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e76:	4b5d      	ldr	r3, [pc, #372]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	4959      	ldr	r1, [pc, #356]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	494a      	ldr	r1, [pc, #296]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808b 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b3a      	ldr	r3, [pc, #232]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	4a39      	ldr	r2, [pc, #228]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0c:	4b37      	ldr	r3, [pc, #220]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe fe80 	bl	8001c28 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fe7c 	bl	8001c28 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e357      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d035      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d02e      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a1a      	ldr	r2, [pc, #104]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f8a:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f90:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fe44 	bl	8001c28 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fe40 	bl	8001c28 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e319      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd2:	d111      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fe0:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	4901      	ldr	r1, [pc, #4]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e00b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	0ffffcff 	.word	0x0ffffcff
 8002ff8:	4baa      	ldr	r3, [pc, #680]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4aa9      	ldr	r2, [pc, #676]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	4ba7      	ldr	r3, [pc, #668]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	49a4      	ldr	r1, [pc, #656]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003012:	4313      	orrs	r3, r2
 8003014:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003022:	4ba0      	ldr	r3, [pc, #640]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003028:	4a9e      	ldr	r2, [pc, #632]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800302e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003032:	4b9c      	ldr	r3, [pc, #624]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003034:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	4999      	ldr	r1, [pc, #612]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003050:	4b94      	ldr	r3, [pc, #592]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003056:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800305e:	4991      	ldr	r1, [pc, #580]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003072:	4b8c      	ldr	r3, [pc, #560]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003080:	4988      	ldr	r1, [pc, #544]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003094:	4b83      	ldr	r3, [pc, #524]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030a2:	4980      	ldr	r1, [pc, #512]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b6:	4b7b      	ldr	r3, [pc, #492]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	4977      	ldr	r1, [pc, #476]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	496f      	ldr	r1, [pc, #444]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fa:	4b6a      	ldr	r3, [pc, #424]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	f023 020c 	bic.w	r2, r3, #12
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	4966      	ldr	r1, [pc, #408]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311c:	4b61      	ldr	r3, [pc, #388]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003122:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	495e      	ldr	r1, [pc, #376]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313e:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314c:	4955      	ldr	r1, [pc, #340]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	494d      	ldr	r1, [pc, #308]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003182:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4944      	ldr	r1, [pc, #272]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a4:	4b3f      	ldr	r3, [pc, #252]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	493c      	ldr	r1, [pc, #240]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c6:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d4:	4933      	ldr	r1, [pc, #204]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e8:	4b2e      	ldr	r3, [pc, #184]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031f6:	492b      	ldr	r1, [pc, #172]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800320a:	4b26      	ldr	r3, [pc, #152]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003210:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003218:	4922      	ldr	r1, [pc, #136]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324a:	4b16      	ldr	r3, [pc, #88]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003258:	4912      	ldr	r1, [pc, #72]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800326c:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003272:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800327c:	4909      	ldr	r1, [pc, #36]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d006      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80d9 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003298:	4b02      	ldr	r3, [pc, #8]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a01      	ldr	r2, [pc, #4]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032a2:	e001      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032aa:	f7fe fcbd 	bl	8001c28 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032b2:	f7fe fcb9 	bl	8001c28 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	@ 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e194      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d021      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11d      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032f2:	4b61      	ldr	r3, [pc, #388]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	019a      	lsls	r2, r3, #6
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	4957      	ldr	r1, [pc, #348]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02e      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800334a:	d129      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800334c:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800335a:	4b47      	ldr	r3, [pc, #284]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003360:	0f1b      	lsrs	r3, r3, #28
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	019a      	lsls	r2, r3, #6
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	071b      	lsls	r3, r3, #28
 8003380:	493d      	ldr	r1, [pc, #244]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003388:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800338e:	f023 021f 	bic.w	r2, r3, #31
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	4937      	ldr	r1, [pc, #220]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01d      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c0:	0f1b      	lsrs	r3, r3, #28
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	019a      	lsls	r2, r3, #6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	071b      	lsls	r3, r3, #28
 80033e0:	4925      	ldr	r1, [pc, #148]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	019a      	lsls	r2, r3, #6
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4919      	ldr	r1, [pc, #100]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003418:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fe fc00 	bl	8001c28 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800342c:	f7fe fbfc 	bl	8001c28 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0d7      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 80cd 	bne.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345e:	f7fe fbe3 	bl	8001c28 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003466:	f7fe fbdf 	bl	8001c28 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	@ 0x64
 8003472:	d903      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0ba      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800347c:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003488:	d0ed      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02e      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d12a      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034b2:	4b51      	ldr	r3, [pc, #324]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034c0:	4b4d      	ldr	r3, [pc, #308]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	0f1b      	lsrs	r3, r3, #28
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4944      	ldr	r1, [pc, #272]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034ee:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	493d      	ldr	r1, [pc, #244]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800351c:	d11d      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800351e:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	0f1b      	lsrs	r3, r3, #28
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	019a      	lsls	r2, r3, #6
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	4929      	ldr	r1, [pc, #164]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003566:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	0e1b      	lsrs	r3, r3, #24
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003574:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	019a      	lsls	r2, r3, #6
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	071b      	lsls	r3, r3, #28
 800359a:	4917      	ldr	r1, [pc, #92]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	4911      	ldr	r1, [pc, #68]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b8:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fe fb30 	bl	8001c28 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035cc:	f7fe fb2c 	bl	8001c28 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e007      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ea:	d1ef      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01c      	b.n	8003648 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	795b      	ldrb	r3, [r3, #5]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe f970 	bl	8001904 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0204 	orr.w	r2, r2, #4
 8003638:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e040      	b.n	80036e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f97a 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fbb6 	bl	8003e00 <UART_SetConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e022      	b.n	80036e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fe0e 	bl	80042c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe95 	bl	800440c <UART_CheckIdleState>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b08b      	sub	sp, #44	@ 0x2c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d147      	bne.n	8003792 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_Transmit_IT+0x22>
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e040      	b.n	8003794 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	@ 0x21
 800373a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d107      	bne.n	8003756 <HAL_UART_Transmit_IT+0x6a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <HAL_UART_Transmit_IT+0xb4>)
 8003752:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003754:	e002      	b.n	800375c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <HAL_UART_Transmit_IT+0xb8>)
 800375a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	61bb      	str	r3, [r7, #24]
   return(result);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e6      	bne.n	800375c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	372c      	adds	r7, #44	@ 0x2c
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	0800493f 	.word	0x0800493f
 80037a4:	08004889 	.word	0x08004889

080037a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d132      	bne.n	8003826 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Receive_IT+0x24>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e02b      	b.n	8003828 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d018      	beq.n	8003816 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	613b      	str	r3, [r7, #16]
   return(result);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	69f9      	ldr	r1, [r7, #28]
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e6      	bne.n	80037e4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	461a      	mov	r2, r3
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fef3 	bl	8004608 <UART_Start_Receive_IT>
 8003822:	4603      	mov	r3, r0
 8003824:	e000      	b.n	8003828 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3728      	adds	r7, #40	@ 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b0ba      	sub	sp, #232	@ 0xe8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003856:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800385a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800385e:	4013      	ands	r3, r2
 8003860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d115      	bne.n	8003898 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00f      	beq.n	8003898 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8297 	beq.w	8003dbc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
      }
      return;
 8003896:	e291      	b.n	8003dbc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8117 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038b2:	4b85      	ldr	r3, [pc, #532]	@ (8003ac8 <HAL_UART_IRQHandler+0x298>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 810a 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d011      	beq.n	80038ec <HAL_UART_IRQHandler+0xbc>
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_UART_IRQHandler+0xec>
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2202      	movs	r2, #2
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_UART_IRQHandler+0x11c>
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003968:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397e:	f043 0208 	orr.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <HAL_UART_IRQHandler+0x18a>
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003998:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 81fd 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d04f      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 febe 	bl	8004794 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	2b40      	cmp	r3, #64	@ 0x40
 8003a24:	d141      	bne.n	8003aaa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1d9      	bne.n	8003a26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <HAL_UART_IRQHandler+0x29c>)
 8003a80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fac2 	bl	8002010 <HAL_DMA_Abort_IT>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d017      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e00f      	b.n	8003ac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f996 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00b      	b.n	8003ac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f992 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e007      	b.n	8003ac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f98e 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ac0:	e17e      	b.n	8003dc0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac2:	bf00      	nop
    return;
 8003ac4:	e17c      	b.n	8003dc0 <HAL_UART_IRQHandler+0x590>
 8003ac6:	bf00      	nop
 8003ac8:	04000120 	.word	0x04000120
 8003acc:	0800485d 	.word	0x0800485d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 814c 	bne.w	8003d72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8145 	beq.w	8003d72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 813e 	beq.w	8003d72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	f040 80b6 	bne.w	8003c7a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8150 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f080 8148 	bcs.w	8003dc4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b48:	f000 8086 	beq.w	8003c58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1da      	bne.n	8003b4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e1      	bne.n	8003b96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e3      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c28:	f023 0310 	bic.w	r3, r3, #16
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e4      	bne.n	8003c18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe f96c 	bl	8001f30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8b8 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c78:	e0a4      	b.n	8003dc4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8096 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8091 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e4      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	623b      	str	r3, [r7, #32]
   return(result);
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e3      	bne.n	8003cdc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	617b      	str	r3, [r7, #20]
   return(result);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e4      	bne.n	8003d28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f83c 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d70:	e02a      	b.n	8003dc8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00e      	beq.n	8003d9c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01c      	beq.n	8003dcc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
    }
    return;
 8003d9a:	e017      	b.n	8003dcc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <HAL_UART_IRQHandler+0x59e>
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00c      	beq.n	8003dce <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fe22 	bl	80049fe <UART_EndTransmit_IT>
    return;
 8003dba:	e008      	b.n	8003dce <HAL_UART_IRQHandler+0x59e>
      return;
 8003dbc:	bf00      	nop
 8003dbe:	e006      	b.n	8003dce <HAL_UART_IRQHandler+0x59e>
    return;
 8003dc0:	bf00      	nop
 8003dc2:	e004      	b.n	8003dce <HAL_UART_IRQHandler+0x59e>
      return;
 8003dc4:	bf00      	nop
 8003dc6:	e002      	b.n	8003dce <HAL_UART_IRQHandler+0x59e>
      return;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <HAL_UART_IRQHandler+0x59e>
    return;
 8003dcc:	bf00      	nop
  }

}
 8003dce:	37e8      	adds	r7, #232	@ 0xe8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4ba6      	ldr	r3, [pc, #664]	@ (80040c4 <UART_SetConfig+0x2c4>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a94      	ldr	r2, [pc, #592]	@ (80040c8 <UART_SetConfig+0x2c8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d120      	bne.n	8003ebe <UART_SetConfig+0xbe>
 8003e7c:	4b93      	ldr	r3, [pc, #588]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d816      	bhi.n	8003eb8 <UART_SetConfig+0xb8>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <UART_SetConfig+0x90>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003ea7 	.word	0x08003ea7
 8003e9c:	08003eb3 	.word	0x08003eb3
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e150      	b.n	8004148 <UART_SetConfig+0x348>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e14d      	b.n	8004148 <UART_SetConfig+0x348>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e14a      	b.n	8004148 <UART_SetConfig+0x348>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e147      	b.n	8004148 <UART_SetConfig+0x348>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e144      	b.n	8004148 <UART_SetConfig+0x348>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a83      	ldr	r2, [pc, #524]	@ (80040d0 <UART_SetConfig+0x2d0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d132      	bne.n	8003f2e <UART_SetConfig+0x12e>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d828      	bhi.n	8003f28 <UART_SetConfig+0x128>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <UART_SetConfig+0xdc>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003f17 	.word	0x08003f17
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f23 	.word	0x08003f23
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e118      	b.n	8004148 <UART_SetConfig+0x348>
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e115      	b.n	8004148 <UART_SetConfig+0x348>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e112      	b.n	8004148 <UART_SetConfig+0x348>
 8003f22:	2308      	movs	r3, #8
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e10f      	b.n	8004148 <UART_SetConfig+0x348>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e10c      	b.n	8004148 <UART_SetConfig+0x348>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a68      	ldr	r2, [pc, #416]	@ (80040d4 <UART_SetConfig+0x2d4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d120      	bne.n	8003f7a <UART_SetConfig+0x17a>
 8003f38:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d013      	beq.n	8003f6e <UART_SetConfig+0x16e>
 8003f46:	2b30      	cmp	r3, #48	@ 0x30
 8003f48:	d814      	bhi.n	8003f74 <UART_SetConfig+0x174>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x162>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d810      	bhi.n	8003f74 <UART_SetConfig+0x174>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <UART_SetConfig+0x15c>
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d006      	beq.n	8003f68 <UART_SetConfig+0x168>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x174>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e0f2      	b.n	8004148 <UART_SetConfig+0x348>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0ef      	b.n	8004148 <UART_SetConfig+0x348>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0ec      	b.n	8004148 <UART_SetConfig+0x348>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e0e9      	b.n	8004148 <UART_SetConfig+0x348>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0e6      	b.n	8004148 <UART_SetConfig+0x348>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a56      	ldr	r2, [pc, #344]	@ (80040d8 <UART_SetConfig+0x2d8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d120      	bne.n	8003fc6 <UART_SetConfig+0x1c6>
 8003f84:	4b51      	ldr	r3, [pc, #324]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f90:	d013      	beq.n	8003fba <UART_SetConfig+0x1ba>
 8003f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f94:	d814      	bhi.n	8003fc0 <UART_SetConfig+0x1c0>
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x1ae>
 8003f9a:	2b80      	cmp	r3, #128	@ 0x80
 8003f9c:	d810      	bhi.n	8003fc0 <UART_SetConfig+0x1c0>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <UART_SetConfig+0x1a8>
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x1b4>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x1c0>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e0cc      	b.n	8004148 <UART_SetConfig+0x348>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e0c9      	b.n	8004148 <UART_SetConfig+0x348>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e0c6      	b.n	8004148 <UART_SetConfig+0x348>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e0c3      	b.n	8004148 <UART_SetConfig+0x348>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e0c0      	b.n	8004148 <UART_SetConfig+0x348>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a44      	ldr	r2, [pc, #272]	@ (80040dc <UART_SetConfig+0x2dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d125      	bne.n	800401c <UART_SetConfig+0x21c>
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <UART_SetConfig+0x2cc>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fde:	d017      	beq.n	8004010 <UART_SetConfig+0x210>
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe4:	d817      	bhi.n	8004016 <UART_SetConfig+0x216>
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fea:	d00b      	beq.n	8004004 <UART_SetConfig+0x204>
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff0:	d811      	bhi.n	8004016 <UART_SetConfig+0x216>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <UART_SetConfig+0x1fe>
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ffa:	d006      	beq.n	800400a <UART_SetConfig+0x20a>
 8003ffc:	e00b      	b.n	8004016 <UART_SetConfig+0x216>
 8003ffe:	2300      	movs	r3, #0
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e0a1      	b.n	8004148 <UART_SetConfig+0x348>
 8004004:	2302      	movs	r3, #2
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e09e      	b.n	8004148 <UART_SetConfig+0x348>
 800400a:	2304      	movs	r3, #4
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e09b      	b.n	8004148 <UART_SetConfig+0x348>
 8004010:	2308      	movs	r3, #8
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e098      	b.n	8004148 <UART_SetConfig+0x348>
 8004016:	2310      	movs	r3, #16
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e095      	b.n	8004148 <UART_SetConfig+0x348>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2f      	ldr	r2, [pc, #188]	@ (80040e0 <UART_SetConfig+0x2e0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d125      	bne.n	8004072 <UART_SetConfig+0x272>
 8004026:	4b29      	ldr	r3, [pc, #164]	@ (80040cc <UART_SetConfig+0x2cc>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004030:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004034:	d017      	beq.n	8004066 <UART_SetConfig+0x266>
 8004036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800403a:	d817      	bhi.n	800406c <UART_SetConfig+0x26c>
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004040:	d00b      	beq.n	800405a <UART_SetConfig+0x25a>
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004046:	d811      	bhi.n	800406c <UART_SetConfig+0x26c>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <UART_SetConfig+0x254>
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004050:	d006      	beq.n	8004060 <UART_SetConfig+0x260>
 8004052:	e00b      	b.n	800406c <UART_SetConfig+0x26c>
 8004054:	2301      	movs	r3, #1
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e076      	b.n	8004148 <UART_SetConfig+0x348>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e073      	b.n	8004148 <UART_SetConfig+0x348>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e070      	b.n	8004148 <UART_SetConfig+0x348>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e06d      	b.n	8004148 <UART_SetConfig+0x348>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e06a      	b.n	8004148 <UART_SetConfig+0x348>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <UART_SetConfig+0x2e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d138      	bne.n	80040ee <UART_SetConfig+0x2ee>
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800408a:	d017      	beq.n	80040bc <UART_SetConfig+0x2bc>
 800408c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004090:	d82a      	bhi.n	80040e8 <UART_SetConfig+0x2e8>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004096:	d00b      	beq.n	80040b0 <UART_SetConfig+0x2b0>
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409c:	d824      	bhi.n	80040e8 <UART_SetConfig+0x2e8>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <UART_SetConfig+0x2aa>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a6:	d006      	beq.n	80040b6 <UART_SetConfig+0x2b6>
 80040a8:	e01e      	b.n	80040e8 <UART_SetConfig+0x2e8>
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e04b      	b.n	8004148 <UART_SetConfig+0x348>
 80040b0:	2302      	movs	r3, #2
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e048      	b.n	8004148 <UART_SetConfig+0x348>
 80040b6:	2304      	movs	r3, #4
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e045      	b.n	8004148 <UART_SetConfig+0x348>
 80040bc:	2308      	movs	r3, #8
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e042      	b.n	8004148 <UART_SetConfig+0x348>
 80040c2:	bf00      	nop
 80040c4:	efff69f3 	.word	0xefff69f3
 80040c8:	40011000 	.word	0x40011000
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40004400 	.word	0x40004400
 80040d4:	40004800 	.word	0x40004800
 80040d8:	40004c00 	.word	0x40004c00
 80040dc:	40005000 	.word	0x40005000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	40007800 	.word	0x40007800
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e02c      	b.n	8004148 <UART_SetConfig+0x348>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a72      	ldr	r2, [pc, #456]	@ (80042bc <UART_SetConfig+0x4bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d125      	bne.n	8004144 <UART_SetConfig+0x344>
 80040f8:	4b71      	ldr	r3, [pc, #452]	@ (80042c0 <UART_SetConfig+0x4c0>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004102:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004106:	d017      	beq.n	8004138 <UART_SetConfig+0x338>
 8004108:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800410c:	d817      	bhi.n	800413e <UART_SetConfig+0x33e>
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d00b      	beq.n	800412c <UART_SetConfig+0x32c>
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004118:	d811      	bhi.n	800413e <UART_SetConfig+0x33e>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <UART_SetConfig+0x326>
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004122:	d006      	beq.n	8004132 <UART_SetConfig+0x332>
 8004124:	e00b      	b.n	800413e <UART_SetConfig+0x33e>
 8004126:	2300      	movs	r3, #0
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e00d      	b.n	8004148 <UART_SetConfig+0x348>
 800412c:	2302      	movs	r3, #2
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e00a      	b.n	8004148 <UART_SetConfig+0x348>
 8004132:	2304      	movs	r3, #4
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e007      	b.n	8004148 <UART_SetConfig+0x348>
 8004138:	2308      	movs	r3, #8
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e004      	b.n	8004148 <UART_SetConfig+0x348>
 800413e:	2310      	movs	r3, #16
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e001      	b.n	8004148 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004150:	d15b      	bne.n	800420a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d828      	bhi.n	80041aa <UART_SetConfig+0x3aa>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <UART_SetConfig+0x360>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041ab 	.word	0x080041ab
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041ab 	.word	0x080041ab
 8004178:	080041ab 	.word	0x080041ab
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7fe fe22 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e013      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe fe32 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004190:	61b8      	str	r0, [r7, #24]
        break;
 8004192:	e00f      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <UART_SetConfig+0x4c4>)
 8004196:	61bb      	str	r3, [r7, #24]
        break;
 8004198:	e00c      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7fe fd05 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 800419e:	61b8      	str	r0, [r7, #24]
        break;
 80041a0:	e008      	b.n	80041b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	61bb      	str	r3, [r7, #24]
        break;
 80041a8:	e004      	b.n	80041b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	77bb      	strb	r3, [r7, #30]
        break;
 80041b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d074      	beq.n	80042a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d916      	bls.n	8004204 <UART_SetConfig+0x404>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d212      	bcs.n	8004204 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f023 030f 	bic.w	r3, r3, #15
 80041e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	89fa      	ldrh	r2, [r7, #14]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e04f      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	77bb      	strb	r3, [r7, #30]
 8004208:	e04c      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d828      	bhi.n	8004262 <UART_SetConfig+0x462>
 8004210:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <UART_SetConfig+0x418>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	0800423d 	.word	0x0800423d
 800421c:	08004245 	.word	0x08004245
 8004220:	0800424d 	.word	0x0800424d
 8004224:	08004263 	.word	0x08004263
 8004228:	08004253 	.word	0x08004253
 800422c:	08004263 	.word	0x08004263
 8004230:	08004263 	.word	0x08004263
 8004234:	08004263 	.word	0x08004263
 8004238:	0800425b 	.word	0x0800425b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe fdc6 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004240:	61b8      	str	r0, [r7, #24]
        break;
 8004242:	e013      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7fe fdd6 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004248:	61b8      	str	r0, [r7, #24]
        break;
 800424a:	e00f      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <UART_SetConfig+0x4c4>)
 800424e:	61bb      	str	r3, [r7, #24]
        break;
 8004250:	e00c      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004252:	f7fe fca9 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8004256:	61b8      	str	r0, [r7, #24]
        break;
 8004258:	e008      	b.n	800426c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425e:	61bb      	str	r3, [r7, #24]
        break;
 8004260:	e004      	b.n	800426c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	77bb      	strb	r3, [r7, #30]
        break;
 800426a:	bf00      	nop
    }

    if (pclk != 0U)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085a      	lsrs	r2, r3, #1
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d909      	bls.n	80042a0 <UART_SetConfig+0x4a0>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d205      	bcs.n	80042a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e001      	b.n	80042a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40007c00 	.word	0x40007c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c6:	d10a      	bne.n	80043de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800441c:	f7fd fc04 	bl	8001c28 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d10e      	bne.n	800444e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f81b 	bl	800447a <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e011      	b.n	8004472 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b09c      	sub	sp, #112	@ 0x70
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448a:	e0a7      	b.n	80045dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004492:	f000 80a3 	beq.w	80045dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fd fbc7 	bl	8001c28 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <UART_WaitOnFlagUntilTimeout+0x32>
 80044a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d13f      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80044ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044bc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80044c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044cc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80044d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044fe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004504:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800450c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e068      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d050      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004548:	d148      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004552:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004568:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
 8004574:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e6      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	613b      	str	r3, [r7, #16]
   return(result);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045a6:	623a      	str	r2, [r7, #32]
 80045a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e010      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	f43f af48 	beq.w	800448c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3770      	adds	r7, #112	@ 0x70
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004608:	b480      	push	{r7}
 800460a:	b097      	sub	sp, #92	@ 0x5c
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463a:	d10e      	bne.n	800465a <UART_Start_Receive_IT+0x52>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <UART_Start_Receive_IT+0x48>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800464a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800464e:	e02d      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	22ff      	movs	r2, #255	@ 0xff
 8004654:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004658:	e028      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10d      	bne.n	800467e <UART_Start_Receive_IT+0x76>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <UART_Start_Receive_IT+0x6c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	22ff      	movs	r2, #255	@ 0xff
 800466e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004672:	e01b      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	227f      	movs	r2, #127	@ 0x7f
 8004678:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800467c:	e016      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004686:	d10d      	bne.n	80046a4 <UART_Start_Receive_IT+0x9c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <UART_Start_Receive_IT+0x92>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	227f      	movs	r2, #127	@ 0x7f
 8004694:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004698:	e008      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	223f      	movs	r2, #63	@ 0x3f
 800469e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046a2:	e003      	b.n	80046ac <UART_Start_Receive_IT+0xa4>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	@ 0x22
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80046ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f8:	d107      	bne.n	800470a <UART_Start_Receive_IT+0x102>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a21      	ldr	r2, [pc, #132]	@ (800478c <UART_Start_Receive_IT+0x184>)
 8004706:	669a      	str	r2, [r3, #104]	@ 0x68
 8004708:	e002      	b.n	8004710 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a20      	ldr	r2, [pc, #128]	@ (8004790 <UART_Start_Receive_IT+0x188>)
 800470e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d019      	beq.n	800474c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800472c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
 8004738:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800473c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e6      	bne.n	8004718 <UART_Start_Receive_IT+0x110>
 800474a:	e018      	b.n	800477e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	613b      	str	r3, [r7, #16]
   return(result);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	653b      	str	r3, [r7, #80]	@ 0x50
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	61bb      	str	r3, [r7, #24]
   return(result);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	375c      	adds	r7, #92	@ 0x5c
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	08004bb9 	.word	0x08004bb9
 8004790:	08004a53 	.word	0x08004a53

08004794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b095      	sub	sp, #84	@ 0x54
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80047bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e6      	bne.n	800479c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	2b01      	cmp	r3, #1
 8004808:	d118      	bne.n	800483c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60bb      	str	r3, [r7, #8]
   return(result);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004850:	bf00      	nop
 8004852:	3754      	adds	r7, #84	@ 0x54
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff faaa 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b08f      	sub	sp, #60	@ 0x3c
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004894:	2b21      	cmp	r3, #33	@ 0x21
 8004896:	d14c      	bne.n	8004932 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d132      	bne.n	800490a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	613b      	str	r3, [r7, #16]
   return(result);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004908:	e013      	b.n	8004932 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004932:	bf00      	nop
 8004934:	373c      	adds	r7, #60	@ 0x3c
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800493e:	b480      	push	{r7}
 8004940:	b091      	sub	sp, #68	@ 0x44
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800494a:	2b21      	cmp	r3, #33	@ 0x21
 800494c:	d151      	bne.n	80049f2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d132      	bne.n	80049c0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	623b      	str	r3, [r7, #32]
   return(result);
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
 800497a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e6      	bne.n	800495a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	60fb      	str	r3, [r7, #12]
   return(result);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	617b      	str	r3, [r7, #20]
   return(result);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e6      	bne.n	800498c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80049be:	e018      	b.n	80049f2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80049c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80049f2:	bf00      	nop
 80049f4:	3744      	adds	r7, #68	@ 0x44
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6979      	ldr	r1, [r7, #20]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	613b      	str	r3, [r7, #16]
   return(result);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fc fea9 	bl	800179c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b096      	sub	sp, #88	@ 0x58
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6a:	2b22      	cmp	r3, #34	@ 0x22
 8004a6c:	f040 8098 	bne.w	8004ba0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004a7e:	b2d9      	uxtb	r1, r3
 8004a80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	400a      	ands	r2, r1
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d17b      	bne.n	8004bb0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004acc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	623b      	str	r3, [r7, #32]
   return(result);
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d12e      	bne.n	8004b98 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d103      	bne.n	8004b88 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2210      	movs	r2, #16
 8004b86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff f929 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b96:	e00b      	b.n	8004bb0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc fd73 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 8004b9e:	e007      	b.n	8004bb0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	619a      	str	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	3758      	adds	r7, #88	@ 0x58
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b096      	sub	sp, #88	@ 0x58
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bc6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd0:	2b22      	cmp	r3, #34	@ 0x22
 8004bd2:	f040 8098 	bne.w	8004d06 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004be6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8004bea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d17b      	bne.n	8004d16 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d12e      	bne.n	8004cfe <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6979      	ldr	r1, [r7, #20]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d103      	bne.n	8004cee <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2210      	movs	r2, #16
 8004cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff f876 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cfc:	e00b      	b.n	8004d16 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fcc0 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 8004d04:	e007      	b.n	8004d16 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0208 	orr.w	r2, r2, #8
 8004d14:	619a      	str	r2, [r3, #24]
}
 8004d16:	bf00      	nop
 8004d18:	3758      	adds	r7, #88	@ 0x58
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <memset>:
 8004d1e:	4402      	add	r2, r0
 8004d20:	4603      	mov	r3, r0
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d100      	bne.n	8004d28 <memset+0xa>
 8004d26:	4770      	bx	lr
 8004d28:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2c:	e7f9      	b.n	8004d22 <memset+0x4>
	...

08004d30 <__libc_init_array>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	4d0d      	ldr	r5, [pc, #52]	@ (8004d68 <__libc_init_array+0x38>)
 8004d34:	4c0d      	ldr	r4, [pc, #52]	@ (8004d6c <__libc_init_array+0x3c>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	42a6      	cmp	r6, r4
 8004d3e:	d109      	bne.n	8004d54 <__libc_init_array+0x24>
 8004d40:	4d0b      	ldr	r5, [pc, #44]	@ (8004d70 <__libc_init_array+0x40>)
 8004d42:	4c0c      	ldr	r4, [pc, #48]	@ (8004d74 <__libc_init_array+0x44>)
 8004d44:	f000 f818 	bl	8004d78 <_init>
 8004d48:	1b64      	subs	r4, r4, r5
 8004d4a:	10a4      	asrs	r4, r4, #2
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	42a6      	cmp	r6, r4
 8004d50:	d105      	bne.n	8004d5e <__libc_init_array+0x2e>
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d58:	4798      	blx	r3
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7ee      	b.n	8004d3c <__libc_init_array+0xc>
 8004d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d62:	4798      	blx	r3
 8004d64:	3601      	adds	r6, #1
 8004d66:	e7f2      	b.n	8004d4e <__libc_init_array+0x1e>
 8004d68:	08004ebc 	.word	0x08004ebc
 8004d6c:	08004ebc 	.word	0x08004ebc
 8004d70:	08004ebc 	.word	0x08004ebc
 8004d74:	08004ec0 	.word	0x08004ec0

08004d78 <_init>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr

08004d84 <_fini>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr
